{"version":3,"sources":["scripts/constants.js","scripts/assets.js","scripts/utils.js","scripts/components/player.js","scripts/game.js","scripts/players/user.js","scripts/components/net.js","scripts/players/opponent.js","scripts/components/ball.js","scripts/components/table.js","scripts/background.js","scripts/components/scoreboard.js","scripts/index.js"],"names":["STATE_INIT","STATE_LOADED","ENV","gravity","toRadian","deg","Math","PI","CANVAS_WIDTH","window","innerWidth","CANVAS_HEIGHT","innerHeight","HALF_CANVAS_WIDTH","HALF_CANVAS_HEIGHT","MAX_CAMERA_Y","BOARD_BACKGROUND","BALL_BACKGROUND","BALL_BORDER","BLACK_A","BLACK_B","BLACK_C","WHITE","TABLE_HEIGHT","TABLE_STAND_PADDING","BOARD_WIDTH","BOARD_LENGTH","BOARD_HALF_LENGTH","BOARD_HALF_WIDTH","BOARD_THICKNESS","BOARD_LEFT_X","BOARD_RIGHT_X","BOARD_Y","BOARD_Z","BORDER_WIDTH","BOARD_OFFSET","BOARD_END","NET_HEIGHT","NET_Z","NET_OFFSET","BALL_START_HEIGHT","BALL_MAX_RADIUS","BALL_MIN_RADIUS","BALL_ANGLE","BALL_INITAL_VEL","SLOPE","TIME","BOUNCE_BACK_VELOCITY","BAT_LENGTH","BAT_WIDTH","BAT_THICKNESS","BAT_INITIAL_Z","PLAYER_Z_POSITION","OPPONENT_Z_POSITION","BOUNDARY_PADDING","SERVE_ANGLE","VELOCITY","UP_ANGLE","SIDE_ANGLE","MAX_MOVE_VELOCITY","LEFT_WALL","RIGHT_WALL","END_WALL","sprite","referee","bounceIn","bounceOut","batHit","clapHigh","clapLow","initAssets","callbackFn","Image","src","require","onload","document","createElement","body","appendChild","addEventListener","setAttribute","removeAssetsEvent","removeEventListener","Position","x","y","z","position","sqrt","projection","camera","CONST","viewplane","get2dProjection","position3d","d","subtract","vz","bx","by","get3dPosition","dy","dz","dx","ax","ay","az","clamp","min","max","value","Player","surface3d","topLeft","halfSize","width","long","topRight","bottomRight","bottomLeft","surface2d","ctx","loadSurface","get2dDistance","height","save","beginPath","translate","rotate","getRotationAngle","drawImage","bat","sx","sy","sw","sh","closePath","restore","bounce","norm","angle","acos","ball","ballPos","current3dPos","selfHalf","left","right","bottom","top","size","batActive","floor","walls","table","net","player","opponent","scoreboard","animationId","lastFrameTime","onPause","onResume","Game","state","begin","inPlay","isOver","ballStart","served","serveSuccess","pause","ballIn","batDirection","resetGame","startGame","gameCtx","obj","pauseFn","resumeFn","initEscapeEvent","renderGame","drawSequence","abs","draw","clearRect","updateStates","hitBall","serveBall","performance","now","requestAnimationFrame","cancelAnimationFrame","resetBounceCount","resetBounce","server","setPosition","movementDirection","checkCollision","play","serve","opponentMovement","pos","hit","getParameters","driver","foul","bounceCount","bounceBack","ballOut","updateScore","checkWin","gameOver","resetState","allOver","removeEscapeEvent","slope","velocity","destination","animate","logBounce","initMouseEvent","e","handleBatMovement","escapeHandler","key","User","dt","prevPositionX","prevPositionZ","sideAngle","atan","event","preventDefault","stopPropagation","clientX","clientY","fitToCourt","Net","spriteWidth","netImageLeft","netImageRight","steps","i","barLeft","barRight","strip","playBall","leftX","rightX","Opponent","random","time","total","elapsed","easeTranslate","start","progress","easing","pow","easeOut","Ball","startPos","current3dY","current2dPos","radius","getRadius","drawShadow","arc","fillStyle","fill","strokeStyle","stroke","lastPosition","get3dDistance","rebound","initialVel","initial3dPos","bounceLevel","getBounceAngle","vy","sin","isBallInside","shadow","ellipse","side","offsetZ","v","cos","upAngle","ballY","Board","startPosition","outer","moveTo","point","lineTo","inner","thickness","midLine","tableLeftStand","tableLeftThickness","tableRightStand","tableRightThickness","drawTableStand","drawOuterSurface","drawInnerSurface","drawThickness","drawMidLine","length","borderWidth","midLeftX","midRightX","map","Floor","Wall","leftWall","backWall","rightWall","drawLeftWall","drawBackWall","drawRightWall","Scoreboard","firstServer","endFn","playerName","bestOfGames","font","fillText","scores","games","current","drawCard","drawScore","deuce","serveChange","dPoints","winner","playerWins","opponentWins","requiredWins","ceil","points","canvas","getElementById","getContext","layoutElement","querySelector","infoElement","introElement","form","App","assets","loadCount","loadComplete","run","style","display","innerHTML","handleFormSubmit","initGame","target","elements","toUpperCase","parseInt","bestof","displayIntro","initComponents","ballStartPosition","playerPosition","opponentPosition","config","scoreboardPosition","displayWin","playAgainBtn","winText","content","classList","add","innerText"],"mappings":"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","file":"scripts.5ba3f598.js","sourceRoot":"../src","sourcesContent":["export const STATE_INIT = 1;\nexport const STATE_LOADED = 2;\n\n// environment export constants\nexport const ENV = {\n  gravity: 9.82,\n  toRadian: (deg) => {\n    return (deg * Math.PI) / 180;\n  },\n};\n\n// canvas export constants\nexport const CANVAS_WIDTH = window.innerWidth;\nexport const CANVAS_HEIGHT = window.innerHeight;\nexport const HALF_CANVAS_WIDTH = CANVAS_WIDTH / 2;\nexport const HALF_CANVAS_HEIGHT = CANVAS_HEIGHT / 2;\nexport const MAX_CAMERA_Y = -1200;\n\n// colors\nexport const BOARD_BACKGROUND = '#284088';\nexport const BALL_BACKGROUND = '#FFD740';\nexport const BALL_BORDER = '#FFC400';\nexport const BLACK_A = '#000000';\nexport const BLACK_B = '#212121';\nexport const BLACK_C = '#424242';\nexport const WHITE = '#FFFFFF';\n\n// board export constants\nexport const TABLE_HEIGHT = 0;\nexport const TABLE_STAND_PADDING = 40;\nexport const BOARD_WIDTH = 800;\nexport const BOARD_LENGTH = (BOARD_WIDTH * 6) / 5;\nexport const BOARD_HALF_LENGTH = BOARD_LENGTH / 2;\nexport const BOARD_HALF_WIDTH = BOARD_WIDTH / 2;\nexport const BOARD_THICKNESS = 20;\nexport const BOARD_LEFT_X = HALF_CANVAS_WIDTH - BOARD_HALF_WIDTH;\nexport const BOARD_RIGHT_X = HALF_CANVAS_WIDTH + BOARD_HALF_WIDTH;\nexport const BOARD_Y = -300;\nexport const BOARD_Z = 160;\nexport const BORDER_WIDTH = 10;\nexport const BOARD_OFFSET = 160;\nexport const BOARD_END = BOARD_LENGTH + BOARD_Z;\nexport const NET_HEIGHT = 90;\nexport const NET_Z = BOARD_Z + BOARD_HALF_LENGTH;\nexport const NET_OFFSET = 50;\n\n// ball export constants and defaults\nexport const BALL_START_HEIGHT = 100; // vertical height from the board\nexport const BALL_MAX_RADIUS = 14;\nexport const BALL_MIN_RADIUS = 6;\nexport const BALL_ANGLE = ENV.toRadian(30);\nexport const BALL_INITAL_VEL = 100;\nexport const SLOPE =\n  (BALL_MIN_RADIUS - BALL_MAX_RADIUS) / (BOARD_LENGTH - BOARD_Z);\nexport const TIME = 0.25;\nexport const BOUNCE_BACK_VELOCITY = 40;\n\n// bat export constants and defaults\nexport const BAT_LENGTH = 207;\nexport const BAT_WIDTH = 124;\nexport const BAT_THICKNESS = 50;\nexport const BAT_INITIAL_Z = 120;\n\n// player export constants and defaults\nexport const PLAYER_Z_POSITION = BOARD_Z - 100;\nexport const OPPONENT_Z_POSITION = BOARD_LENGTH + BOARD_Z;\nexport const BOUNDARY_PADDING = 100;\n\n// gameplay export constants\nexport const SERVE_ANGLE = ENV.toRadian(-50);\nexport const VELOCITY = 85;\nexport const UP_ANGLE = 30;\nexport const SIDE_ANGLE = 0;\nexport const MAX_MOVE_VELOCITY = 1200;\n\n// background export constants\nexport const LEFT_WALL = HALF_CANVAS_WIDTH - BOARD_WIDTH * 2;\nexport const RIGHT_WALL = HALF_CANVAS_WIDTH + BOARD_WIDTH * 2;\nexport const END_WALL = BOARD_END + BOARD_WIDTH * 2;\n","// Game image and sounds\nlet sprite;\nlet referee;\nlet bounceIn;\nlet bounceOut;\nlet batHit;\nlet clapHigh;\nlet clapLow;\n\nexport function initAssets(callbackFn) {\n  sprite = new Image();\n  // sprite.src = App.assets.src + 'sprite.png';\n  sprite.src = require('../assets/sprite.png');\n  sprite.onload = callbackFn;\n\n  referee = document.createElement('audio');\n  document.body.appendChild(referee);\n  referee.addEventListener('canplaythrough', callbackFn);\n  referee.setAttribute('src', require('../assets/sounds/referee.mp3'));\n\n  bounceIn = document.createElement('audio');\n  document.body.appendChild(bounceIn);\n  bounceIn.addEventListener('canplaythrough', callbackFn);\n  bounceIn.setAttribute('src', require('../assets/sounds/bounce1.mp3'));\n\n  bounceOut = document.createElement('audio');\n  document.body.appendChild(bounceOut);\n  bounceOut.addEventListener('canplaythrough', callbackFn);\n  bounceOut.setAttribute('src', require('../assets/sounds/bounce2.mp3'));\n\n  batHit = document.createElement('audio');\n  document.body.appendChild(batHit);\n  batHit.addEventListener('canplaythrough', callbackFn);\n  batHit.setAttribute('src', require('../assets/sounds/hit.mp3'));\n\n  clapHigh = document.createElement('audio');\n  document.body.appendChild(clapHigh);\n  clapHigh.addEventListener('canplaythrough', callbackFn);\n  clapHigh.setAttribute('src', require('../assets/sounds/clap1.mp3'));\n\n  clapLow = document.createElement('audio');\n  document.body.appendChild(clapLow);\n  clapLow.addEventListener('canplaythrough', callbackFn);\n  clapLow.setAttribute('src', require('../assets/sounds/clap2.mp3'));\n}\n\nexport function removeAssetsEvent(callbackFn) {\n  referee.removeEventListener('canplaythrough', callbackFn);\n  bounceIn.removeEventListener('canplaythrough', callbackFn);\n  bounceOut.removeEventListener('canplaythrough', callbackFn);\n  batHit.removeEventListener('canplaythrough', callbackFn);\n  clapHigh.removeEventListener('canplaythrough', callbackFn);\n  clapLow.removeEventListener('canplaythrough', callbackFn);\n}\n\nexport { sprite, referee, bounceIn, bounceOut, batHit, clapHigh, clapLow };\n","import * as CONST from './constants';\n\nexport class Position {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Subtract next position from this position.\n   *\n   * @param {Position} position - Position to be subtacted.\n   * @returns {Position} Subtracted new position.\n   */\n  subtract = (position) => {\n    const x = this.x - position.x;\n    const y = this.y - position.y;\n    const z = this.z - position.z;\n\n    return new Position(x, y, z);\n  };\n\n  /**\n   * Get distance from this position to next positon in space.\n   *\n   * @param {Position} position - Position in space.\n   * @returns {number} Distance from this position to next position.\n   */\n  get3dDistance = (position) => {\n    const x = this.x - position.x;\n    const y = this.y - position.y;\n    const z = this.z - position.z;\n\n    return Math.sqrt(x * x + y * y + z * z);\n  };\n\n  /**\n   * Get distance from this position to next positon in paper.\n   *\n   * @param {Position} position - Position in paper.\n   * @returns {number} Distance from this position to next position.\n   */\n  get2dDistance = (position) => {\n    const x = this.x - position.x;\n    const y = this.y - position.y;\n\n    return Math.sqrt(x * x + y * y);\n  };\n}\n\nexport const projection = {\n  camera: {\n    position: new Position(0, CONST.MAX_CAMERA_Y, -300),\n  },\n\n  viewplane: new Position(0, 0, 500),\n\n  /**\n   * Get projection of 3D position into 2D position on plane.\n   *\n   * @param {Position} position3d - 3D position.\n   * @returns {Position} 2D position.\n   */\n  get2dProjection: (position3d) => {\n    const d = position3d.subtract(projection.camera.position);\n    const vz = projection.viewplane.z / d.z;\n    const bx = vz * d.x + projection.viewplane.x;\n    const by = vz * d.y + projection.viewplane.y;\n\n    return new Position(bx, by);\n  },\n\n  /**\n   * Get 3D position from 2D position on plane.\n   *\n   * @param {number} bx - X coordinate.\n   * @param {number} by - Y coordinate.\n   * @returns {Position} 3D position.\n   */\n  get3dPosition: (bx, by) => {\n    const dy =\n      -CONST.BALL_START_HEIGHT + CONST.BOARD_Y - projection.camera.position.y;\n    const dz = (projection.viewplane.z * dy) / (by - projection.viewplane.y);\n    const dx = ((bx - projection.viewplane.x) * dz) / projection.viewplane.z;\n\n    const ax = projection.camera.position.x + dx;\n    const ay = projection.camera.position.y + dy;\n    const az = projection.camera.position.z + dz;\n\n    return new Position(ax, ay, az);\n  },\n};\n\n/**\n * Limit number inbetween range.\n *\n * @param {number} min - Minimum value.\n * @param {number} max - Maximum value.\n * @param {number} value - Value to clamp.\n * @returns {number} Number between min and max.\n */\nexport function clamp(min, max, value) {\n  return Math.min(Math.max(value, min), max);\n}\n","import { sprite } from '../assets';\nimport * as CONST from '../constants';\nimport { Position, projection } from '../utils';\n\nclass Player {\n  constructor(position) {\n    this.position = new Position(position.x, position.y, position.z);\n    this.size = {\n      long: CONST.BAT_LENGTH,\n      width: CONST.BAT_WIDTH,\n    };\n    this.halfSize = {\n      long: this.size.long / 2,\n      width: this.size.width / 2,\n    };\n    this.surface3d;\n    this.surface2d;\n    this.bounce = 0;\n    this.batActive = true;\n    this.selfHalf;\n  }\n\n  // Set 3D position and 2D projection of Player's bat\n  loadSurface = () => {\n    this.surface3d = {\n      topLeft: new Position(\n        this.position.x - this.halfSize.width,\n        this.position.y - this.halfSize.long,\n        this.position.z,\n      ),\n      topRight: new Position(\n        this.position.x + this.halfSize.width,\n        this.position.y - this.halfSize.long,\n        this.position.z,\n      ),\n      bottomRight: new Position(\n        this.position.x + this.halfSize.width,\n        this.position.y + this.halfSize.long,\n        this.position.z,\n      ),\n      bottomLeft: new Position(\n        this.position.x - this.halfSize.width,\n        this.position.y + this.halfSize.long,\n        this.position.z,\n      ),\n    };\n\n    this.surface2d = {\n      topLeft: projection.get2dProjection(this.surface3d.topLeft),\n      topRight: projection.get2dProjection(this.surface3d.topRight),\n      bottomRight: projection.get2dProjection(this.surface3d.bottomRight),\n      bottomLeft: projection.get2dProjection(this.surface3d.bottomLeft),\n    };\n  };\n\n  // Draw Player's bat on canvas\n  draw = (ctx) => {\n    this.loadSurface();\n\n    const width = this.surface2d.topRight.get2dDistance(this.surface2d.topLeft);\n    const height = this.surface2d.topLeft.get2dDistance(\n      this.surface2d.bottomLeft,\n    );\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.translate(\n      this.surface2d.topLeft.x + width / 2,\n      this.surface2d.topLeft.y + height / 2,\n    );\n    ctx.rotate(this.getRotationAngle());\n    ctx.drawImage(\n      sprite,\n      Player.sprite.bat.sx,\n      Player.sprite.bat.sy,\n      Player.sprite.bat.sw,\n      Player.sprite.bat.sh,\n      -width / 2,\n      -height / 2,\n      width,\n      height,\n    );\n    ctx.closePath();\n    ctx.restore();\n  };\n\n  resetBounce = () => {\n    this.bounce = 0;\n  };\n\n  /**\n   * Get angle of rotation of bat as per Player's position.\n   *\n   * @returns {number} Angle of rotation.\n   */\n  getRotationAngle = () => {\n    const norm =\n      (CONST.HALF_CANVAS_WIDTH - this.position.x) /\n      (CONST.BOARD_HALF_WIDTH + CONST.BOUNDARY_PADDING);\n    const angle = Math.acos(norm) - CONST.ENV.toRadian(90);\n\n    return angle;\n  };\n\n  // Increase ball bounce count on Player's court\n  logBounce = (ball) => {\n    const ballPos = ball.current3dPos;\n\n    if (\n      ballPos.x >= this.selfHalf.left &&\n      ballPos.x <= this.selfHalf.right &&\n      ballPos.z >= this.selfHalf.bottom &&\n      ballPos.z <= this.selfHalf.top\n    ) {\n      this.bounce++;\n    }\n  };\n\n  /**\n   * Check for foul condition.\n   *\n   * @returns {boolean} Foul or not foul.\n   */\n  foul = () => {\n    if (this.bounce !== 1 && this.position.z <= this.selfHalf.top) {\n      return true;\n    }\n\n    return false;\n  };\n}\n\nPlayer.sprite = {\n  bat: {\n    sx: 0,\n    sy: 0,\n    sw: 124,\n    sh: 207,\n  },\n};\n\nexport default Player;\n","import { batHit } from './assets';\nimport * as CONST from './constants';\nimport { Position, clamp } from './utils';\n\nlet Game = {\n  state: {\n    begin: true,\n    inPlay: false,\n    isOver: false,\n    ballStart: true,\n    served: false,\n    serveSuccess: false,\n    pause: false,\n    ballIn: true,\n  },\n  batDirection: false,\n};\n\n// Set Game ct to initial state\nfunction resetGame() {\n  Game = {\n    state: {\n      begin: true,\n      inPlay: false,\n      isOver: false,\n      ballStart: true,\n      served: false,\n      serveSuccess: false,\n      pause: false,\n      ballIn: true,\n    },\n    batDirection: false,\n  };\n}\n\nlet ctx;\nlet floor, walls, table, net, ball, player, opponent, scoreboard;\nlet animationId;\nlet lastFrameTime;\nlet onPause, onResume;\n\nfunction startGame(gameCtx, obj, pauseFn, resumeFn) {\n  ctx = gameCtx;\n  ({ floor, walls, table, net, ball, player, opponent, scoreboard } = obj);\n  onPause = pauseFn;\n  onResume = resumeFn;\n  initEscapeEvent();\n  renderGame();\n}\n\n// Draw on canvas sequentially\nfunction drawSequence(ctx) {\n  if (Math.abs(ball.current3dPos.y) < -CONST.BOARD_Y) {\n    ball.draw(ctx);\n    table.draw(ctx);\n    net.draw(ctx);\n  } else {\n    table.draw(ctx);\n    net.draw(ctx);\n    ball.draw(ctx);\n  }\n}\n\n// Perform game loop operations\nfunction renderGame() {\n  ctx.clearRect(\n    -500,\n    -500,\n    CONST.CANVAS_WIDTH + 500,\n    CONST.CANVAS_HEIGHT + 500,\n  );\n\n  floor.draw(ctx);\n  walls.draw(ctx);\n  scoreboard.draw(ctx);\n\n  if (ball.current3dPos.z > opponent.position.z) {\n    drawSequence(ctx);\n    opponent.draw(ctx);\n  } else {\n    opponent.draw(ctx);\n    drawSequence(ctx);\n  }\n\n  if (Game.state.begin && !Game.state.isOver) {\n    player.draw(ctx);\n    updateStates();\n\n    if (!Game.state.served) {\n      serveBall();\n    } else if (Game.state.inPlay) {\n      hitBall();\n    }\n  } else {\n    cancelAnimationFrame(animationId);\n\n    return;\n  }\n\n  lastFrameTime = performance.now();\n  animationId = requestAnimationFrame(renderGame);\n}\n\n// Reset player's bounce count\nfunction resetBounceCount() {\n  player.resetBounce();\n  opponent.resetBounce();\n}\n\n// Choose ball server and serve the ball\nfunction serveBall() {\n  if (scoreboard.state.server === player) {\n    // Limit ball within board\n    const x = clamp(\n      CONST.BOARD_LEFT_X + CONST.BALL_MAX_RADIUS,\n      CONST.BOARD_RIGHT_X - CONST.BALL_MAX_RADIUS,\n      player.position.x,\n    );\n\n    ball.setPosition(new Position(x, player.position.y, CONST.BOARD_Z));\n\n    if (!Game.batDirection) {\n      player.movementDirection(ball);\n    }\n    if (player.batActive && Game.batDirection && ball.checkCollision(player)) {\n      resetBounceCount();\n      batHit.play();\n      player.serve(ball, lastFrameTime);\n      opponentMovement();\n      Game.state.served = true;\n      player.batActive = false;\n    }\n  } else {\n    resetBounceCount();\n    const pos = opponent.setPosition();\n\n    ball.setPosition(pos);\n    batHit.play();\n    opponent.serve(ball, CONST.VELOCITY);\n    Game.state.served = true;\n    player.batActive = true;\n  }\n}\n\n// Perform driving of ball to opponent's court\nfunction hitBall() {\n  if (player.batActive && ball.checkCollision(player)) {\n    resetBounceCount();\n    batHit.play();\n    Game.state.serveSuccess = true;\n    player.batActive = false;\n    ball.hit(player, ...player.getParameters(lastFrameTime));\n    scoreboard.state.driver = player;\n    if (player.foul()) {\n      Game.state.inPlay = false;\n    }\n    opponentMovement();\n\n    return;\n  }\n\n  if (opponent.batActive && ball.checkCollision(opponent)) {\n    resetBounceCount();\n    batHit.play();\n    Game.state.serveSuccess = true;\n    ball.hit(opponent, CONST.VELOCITY, CONST.SIDE_ANGLE, CONST.UP_ANGLE);\n    player.batActive = true;\n    scoreboard.state.driver = opponent;\n    if (opponent.foul()) {\n      Game.state.inPlay = false;\n    }\n\n    return;\n  }\n}\n\n// Update game states with conditions\nfunction updateStates() {\n  if (ball.bounceCount === 1) {\n    Game.state.inPlay = true;\n  }\n\n  if (net.checkCollision(ball)) {\n    ball.bounceBack(net, scoreboard.state.driver);\n    Game.state.inPlay = false;\n    scoreboard.state.driver.batActive = false;\n  }\n\n  if (Game.state.inPlay && ball.ballOut()) {\n    updateScore();\n    Game.state.served = false;\n    Game.state.inPlay = false;\n    Game.batDirection = false;\n    Game.state.serveSuccess = false;\n    player.batActive = true;\n    opponent.batActive = true;\n  }\n}\n\n// Update scoreboard for current game\nfunction updateScore() {\n  scoreboard.updateScore(player, opponent);\n  scoreboard.checkWin(gameOver);\n  scoreboard.server(player, opponent);\n}\n\n// Set game states for game over\nfunction gameOver() {\n  Game.state.inPlay = false;\n  scoreboard.resetState();\n\n  if (scoreboard.allOver()) {\n    removeEscapeEvent();\n  }\n}\n\n// Control opponent's bat movement with ball's movement\nfunction opponentMovement() {\n  const pos = ball.current3dPos;\n  const slope = (ball.velocity.z * CONST.TIME) / (10 * ball.velocity.x);\n  const destination = new Position(\n    pos.x + (CONST.BOARD_END - pos.z) / slope,\n    opponent.position.y,\n    CONST.BOARD_END + 10,\n  );\n\n  const right = CONST.BOARD_RIGHT_X;\n  const left = CONST.BOARD_LEFT_X;\n\n  if (destination.x < left) {\n    destination.x = left;\n\n    const z = slope * (left - pos.x) + pos.z;\n\n    destination.z =\n      z > CONST.NET_Z + CONST.BOARD_HALF_LENGTH / 2 ? z : destination.z;\n  } else if (destination.x > right) {\n    destination.x = right;\n\n    const z = slope * (right - pos.x) + pos.z;\n\n    destination.z =\n      z > CONST.NET_Z + CONST.BOARD_HALF_LENGTH / 2 ? z : destination.z;\n  }\n\n  opponent.animate(destination);\n}\n\nfunction logBounce() {\n  player.logBounce(ball);\n  opponent.logBounce(ball);\n}\n\nfunction initMouseEvent() {\n  document.addEventListener('mousemove', (e) => {\n    if (player) {\n      player.handleBatMovement(e);\n    }\n  });\n}\n\nfunction escapeHandler(e) {\n  Game.state.pause = !Game.state.pause;\n  if (e.key === 'Escape') {\n    if (Game.state.pause) {\n      cancelAnimationFrame(animationId);\n      onPause();\n    } else {\n      onResume();\n      animationId = requestAnimationFrame(renderGame);\n    }\n  }\n}\n\nfunction initEscapeEvent() {\n  document.addEventListener('keyup', escapeHandler);\n}\n\nfunction removeEscapeEvent() {\n  document.removeEventListener('keyup', escapeHandler);\n}\n\nexport { Game, startGame, resetGame, logBounce, initMouseEvent };\n","import * as CONST from '../constants';\nimport Player from '../components/player';\nimport { projection, clamp } from '../utils';\nimport { Game } from '../game';\n\nclass User extends Player {\n  constructor(position) {\n    super(position);\n    this.selfHalf = {\n      top: CONST.BOARD_Z + CONST.BOARD_HALF_LENGTH,\n      bottom: CONST.BOARD_Z,\n      left: CONST.BOARD_LEFT_X,\n      right: CONST.BOARD_RIGHT_X,\n    };\n  }\n\n  /**\n   * Get array of initial parameters for motion of ball.\n   *\n   * @param {Object} lastFrameTime\n   * @returns {velocity} Initial velocity of ball.\n   * @returns {sideAngle} Angle between x and z axis.\n   * @returns {upAngle} Angle between z and y axis.\n   */\n  getParameters = (lastFrameTime) => {\n    const dt = (performance.now() - lastFrameTime) / 1000;\n    const dx = this.position.x - this.prevPositionX;\n    const dz = this.position.z - this.prevPositionZ;\n    const sideAngle = dx !== 0 ? Math.atan(dz / dx) : 0;\n\n    // Clamp mouse velocity\n    const v = clamp(0, CONST.MAX_MOVE_VELOCITY, dz / dt);\n\n    // Calculate velocity ranging from 60 to 90\n    // equation of line: x = (y + 2400) / 60\n    const velocity = (v + 2400) / 40;\n\n    // Calculate angle ranging from 30 to 60 degree\n    // equation of line: x = 120 - y\n    const upAngle = 120 - velocity;\n\n    return [velocity, sideAngle, upAngle];\n  };\n\n  // Serve ball from user\n  serve = (ball, lastFrameTime) => {\n    ball.serve(...this.getParameters(lastFrameTime));\n  };\n\n  // Limit movement of bat\n  fitToCourt = () => {\n    const left =\n      CONST.BOARD_LEFT_X - CONST.BOUNDARY_PADDING + CONST.BALL_MAX_RADIUS;\n    const right =\n      CONST.BOARD_RIGHT_X + CONST.BOUNDARY_PADDING - CONST.BALL_MAX_RADIUS;\n    const top = CONST.BOARD_Z + CONST.BOARD_HALF_LENGTH;\n\n    this.position.x = clamp(left, right, this.position.x);\n    this.position.z = clamp(0, top, this.position.z);\n  };\n\n  /**\n   * Set 3D position of bat from 2D position.\n   *\n   * @param {Event} event - Mousemove event.\n   */\n  handleBatMovement = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.prevPositionX = this.position.x;\n    this.prevPositionZ = this.position.z;\n    this.position = projection.get3dPosition(event.clientX, event.clientY);\n    this.fitToCourt();\n  };\n\n  // Allow bat movement pass the ball\n  movementDirection = (ball) => {\n    if (this.position.z - (ball.current3dPos.z - CONST.BAT_THICKNESS) < 0) {\n      Game.batDirection = true;\n    }\n  };\n}\n\nexport default User;\n","import { sprite } from '../assets';\nimport * as CONST from '../constants';\nimport { Position, projection } from '../utils';\n\nclass Net {\n  constructor() {\n    this.width = CONST.BOARD_WIDTH;\n    this.height = CONST.NET_HEIGHT;\n    this.z = CONST.NET_Z;\n    this.y = CONST.BOARD_Y;\n\n    const leftX = CONST.HALF_CANVAS_WIDTH - CONST.BOARD_HALF_WIDTH;\n    const rightX = CONST.HALF_CANVAS_WIDTH + CONST.BOARD_HALF_WIDTH;\n\n    this.surface3d = {\n      topLeft: new Position(leftX, this.y - this.height, this.z),\n      topRight: new Position(rightX, this.y - this.height, this.z),\n      bottomRight: new Position(rightX, this.y, this.z),\n      bottomLeft: new Position(leftX, this.y, this.z),\n      netImageLeft: new Position(leftX, this.y, this.z),\n      netImageRight: new Position(leftX + Net.sprite.strip.sw, this.y, this.z),\n    };\n\n    this.surface2d = {\n      topLeft: projection.get2dProjection(this.surface3d.topLeft),\n      topRight: projection.get2dProjection(this.surface3d.topRight),\n      bottomRight: projection.get2dProjection(this.surface3d.bottomRight),\n      bottomLeft: projection.get2dProjection(this.surface3d.bottomLeft),\n      netImageLeft: projection.get2dProjection(this.surface3d.netImageLeft),\n      netImageRight: projection.get2dProjection(this.surface3d.netImageRight),\n    };\n\n    this.spriteWidth;\n  }\n\n  // Draw net with sprite image on canvas\n  draw = (ctx) => {\n    const height = this.surface2d.topLeft.get2dDistance(\n      this.surface2d.bottomLeft,\n    );\n    const width = this.surface2d.topRight.get2dDistance(this.surface2d.topLeft);\n\n    this.spriteWidth = this.surface2d.netImageLeft.get2dDistance(\n      this.surface2d.netImageRight,\n    );\n\n    // Add one more layer to left and right of net width\n    const steps = Math.floor(width / this.spriteWidth) + 2;\n\n    for (let i = 0; i <= steps; i++) {\n      if (i === 0) {\n        ctx.drawImage(\n          sprite,\n          Net.sprite.barLeft.sx,\n          Net.sprite.barLeft.sy,\n          Net.sprite.barLeft.sw,\n          Net.sprite.barLeft.sh,\n          this.surface2d.topLeft.x - this.spriteWidth,\n          this.surface2d.topLeft.y,\n          this.spriteWidth,\n          height,\n        );\n      } else if (i === steps) {\n        ctx.drawImage(\n          sprite,\n          Net.sprite.barRight.sx,\n          Net.sprite.barRight.sy,\n          Net.sprite.barRight.sw,\n          Net.sprite.barRight.sh,\n          this.surface2d.topLeft.x + this.spriteWidth * (i - 1),\n          this.surface2d.topLeft.y,\n          this.spriteWidth,\n          height,\n        );\n      } else {\n        ctx.drawImage(\n          sprite,\n          Net.sprite.strip.sx,\n          Net.sprite.strip.sy,\n          Net.sprite.strip.sw,\n          Net.sprite.strip.sh,\n          this.surface2d.topLeft.x + this.spriteWidth * (i - 1),\n          this.surface2d.topLeft.y,\n          this.spriteWidth,\n          height,\n        );\n      }\n    }\n  };\n\n  // Check for collision of ball on net\n  checkCollision = (ball) => {\n    const playBall = {\n      playerZ: ball.current3dPos.z - CONST.BALL_MAX_RADIUS,\n      opponentZ: ball.current3dPos.z + CONST.BALL_MAX_RADIUS,\n      topY: ball.current3dPos.y + CONST.BALL_MAX_RADIUS,\n      bottomY: ball.current3dPos.y - CONST.BALL_MAX_RADIUS,\n      centerX: ball.current3dPos.x + CONST.BALL_MAX_RADIUS,\n    };\n\n    if (\n      ((playBall.opponentZ >= this.z - CONST.BALL_MAX_RADIUS &&\n        playBall.opponentZ <= this.z + CONST.BALL_MAX_RADIUS) ||\n        (playBall.playerZ <= this.z - CONST.BALL_MAX_RADIUS &&\n          playBall.playerZ >= this.z + CONST.BALL_MAX_RADIUS)) &&\n      playBall.bottomY <= this.height - CONST.BOARD_Y &&\n      playBall.centerX <= this.surface3d.bottomRight.x + this.spriteWidth &&\n      playBall.centerX >= this.surface3d.topLeft.x - this.spriteWidth\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n}\n\nNet.sprite = {\n  strip: {\n    sx: 127,\n    sy: 0,\n    sw: 37,\n    sh: 90,\n  },\n  barLeft: {\n    sx: 165,\n    sy: 0,\n    sw: 37,\n    sh: 90,\n  },\n  barRight: {\n    sx: 224,\n    sy: 0,\n    sw: 37,\n    sh: 90,\n  },\n};\n\nexport default Net;\n","import { Position } from '../utils';\nimport * as CONST from '../constants';\nimport Player from '../components/player';\n\nclass Opponent extends Player {\n  constructor(position) {\n    super(position);\n\n    // Define court area for player\n    this.selfHalf = {\n      top: CONST.BOARD_END,\n      bottom: CONST.BOARD_Z + CONST.BOARD_HALF_LENGTH,\n      left: CONST.BOARD_LEFT_X,\n      right: CONST.BOARD_RIGHT_X,\n    };\n  }\n\n  /**\n   * Set position of opponent.\n   *\n   * @param {Position} position - Position object.\n   * @returns {Position} New position of opponent.\n   */\n  setPosition = (position) => {\n    if (!position) {\n      const left = CONST.BOARD_LEFT_X + CONST.BALL_MAX_RADIUS;\n      const right = CONST.BOARD_RIGHT_X - CONST.BALL_MAX_RADIUS;\n      const x = Math.random() * (right - left) + left;\n      const y = CONST.BOARD_Y - CONST.BALL_START_HEIGHT;\n\n      this.position = new Position(x, y, CONST.BOARD_END);\n\n      return this.position;\n    }\n\n    this.position = new Position(position.x, position.y, position.z);\n\n    return this.position;\n  };\n\n  /**\n   * Serve ball from opponent.\n   *\n   * @param {Ball} ball - Ball object.\n   * @param {number} velocity - Serving velocity of ball.\n   */\n  serve = (ball, velocity) => {\n    ball.setPosition(this.position);\n    ball.serve(-velocity);\n  };\n\n  /**\n   * Ease animate position of opponent from current position to new position.\n   *\n   * @param {Position} destination - New position of opponent.\n   * @see https://codepen.io/bdc/pen/MvBEwP\n   */\n  animate = (destination) => {\n    const x = this.position.x;\n    const z = this.position.z;\n    const dx = destination.x - this.position.x;\n    const dz = destination.z - this.position.z;\n    const time = {\n      total: 1500,\n      elapsed: 0,\n    };\n\n    const getProgress = ({ elapsed, total }) => Math.min(elapsed / total, 1);\n    const easeOut = (progress) => Math.pow(--progress, 5) + 1;\n\n    const easeTranslate = (now) => {\n      if (!time.start) {\n        time.start = now;\n      } else {\n        time.elapsed = now - time.start;\n      }\n\n      const progress = getProgress(time);\n      const easing = easeOut(progress);\n\n      this.position.x = x + dx * easing;\n      this.position.z = z + dz * easing;\n      if (progress < 1) {\n        requestAnimationFrame(easeTranslate);\n      }\n    };\n\n    requestAnimationFrame(easeTranslate);\n  };\n}\n\nexport default Opponent;\n","import User from '../players/user';\nimport * as CONST from '../constants';\nimport Opponent from '../players/opponent';\nimport { Game, logBounce } from '../game/';\nimport { Position, projection } from '../utils';\nimport { bounceIn, bounceOut } from '../assets';\n\nclass Ball {\n  constructor(startPos) {\n    this.initial3dPos = new Position(startPos.x, startPos.y, startPos.z);\n    this.current3dPos = new Position(startPos.x, startPos.y, startPos.z);\n    this.radius = CONST.BALL_MAX_RADIUS;\n    this.angle = CONST.BALL_ANGLE;\n    this.initialVel = CONST.BALL_INITAL_VEL;\n    this.velocity = {\n      z: this.initialVel * Math.cos(this.angle),\n      y: 0,\n      x: 0,\n    };\n    this.time = 0;\n    this.rebound = false;\n    this.lastPosition = new Position(startPos.x, startPos.y, startPos.z);\n    this.bounceCount = 0;\n    this.bounceLevel = -CONST.BOARD_Y;\n  }\n\n  /**\n   * Get radius of ball with respect to its 3D position.\n   *\n   * @returns {number} Radius of ball.\n   */\n  getRadius = () =>\n    Math.max(\n      CONST.SLOPE * (this.current3dPos.z - CONST.BOARD_Z) +\n        CONST.BALL_MAX_RADIUS,\n      4,\n    );\n\n  // Draw ball on canvas\n  draw = (ctx) => {\n    if (Game.state.served) {\n      this.bounce();\n    }\n\n    const current3dY =\n      this.current3dPos.y > 0 ? -this.current3dPos.y : this.current3dPos.y;\n    const current2dPos = projection.get2dProjection(\n      new Position(this.current3dPos.x, current3dY, this.current3dPos.z),\n    );\n\n    if (this.current3dPos.z > 0) {\n      this.radius = this.getRadius();\n    }\n\n    this.drawShadow(ctx);\n\n    ctx.beginPath();\n    ctx.arc(current2dPos.x, current2dPos.y, this.radius, 0, 360);\n    ctx.fillStyle = CONST.BALL_BACKGROUND;\n    ctx.fill();\n    ctx.strokeStyle = CONST.BALL_BORDER;\n    ctx.stroke();\n    ctx.closePath();\n  };\n\n  /**\n   * Get angle of incidence of ball on xz plane.\n   *\n   * @returns {number} Angle of incidence.\n   */\n  getBounceAngle = () => {\n    const d = this.lastPosition.get3dDistance(this.current3dPos);\n    const dx = this.current3dPos.get3dDistance(\n      new Position(this.lastPosition.x, 0, this.lastPosition.z),\n    );\n\n    return Math.atan(d / dx);\n  };\n\n  // Calculate and set position of ball with time\n  bounce = () => {\n    if (!this.rebound) {\n      // Set last position of ball\n      this.lastPosition = new Position(\n        this.current3dPos.x,\n        this.current3dPos.y,\n        this.current3dPos.z,\n      );\n\n      // Calculate z coordinate of ball\n      // z = z0 + vz * t\n      this.current3dPos.z = this.initial3dPos.z + this.velocity.z * this.time;\n\n      if (this.velocity.x !== 0) {\n        // Calculate x coordinate of ball\n        this.current3dPos.x += this.velocity.x * 10;\n      }\n\n      // Calculate y component velocity of ball\n      // vy = v0 * sin(angle) - g*t\n      const vy = this.initialVel * Math.sin(this.angle);\n\n      this.velocity.y = vy - CONST.ENV.gravity * this.time;\n\n      // Calculate y coordinate of ball\n      // y = y0 + v0*sin(angle)*t - 0.5*g*t*t\n      this.current3dPos.y =\n        -this.initial3dPos.y +\n        vy * this.time -\n        CONST.ENV.gravity * this.time * this.time * 0.5;\n\n      // check if ball hit the board or ground\n      if (this.current3dPos.y < this.bounceLevel) {\n        this.rebound = true;\n      }\n\n      this.time += CONST.TIME;\n    } else {\n      logBounce();\n\n      // play ball bounce sound according to bouncing surface\n      if (Game.state.ballIn) {\n        bounceIn.play();\n      } else {\n        bounceOut.play();\n      }\n\n      // Perform rebound effect\n      this.initialVel = -this.velocity.y;\n      this.initial3dPos.z = this.current3dPos.z;\n      this.current3dPos.y = -this.bounceLevel;\n      this.initial3dPos.y = -this.bounceLevel;\n      this.rebound = false;\n      this.time = 0;\n      this.angle = this.getBounceAngle();\n\n      this.bounceCount++;\n    }\n  };\n\n  // Draw elliptical shadow of ball on canvas\n  drawShadow = (ctx) => {\n    const y = this.isBallInside() ? CONST.BOARD_Y : 0;\n    let shadow = new Position(this.current3dPos.x, y, this.current3dPos.z);\n\n    shadow = projection.get2dProjection(shadow);\n\n    ctx.beginPath();\n    ctx.ellipse(shadow.x, shadow.y, this.radius, this.radius * 0.5, 0, 0, 360);\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  /**\n   * Bounce ball after collision with net.\n   *\n   * @param {Net} net - Net object.\n   * @param {Player} side - Player object.\n   */\n  bounceBack = (net, side) => {\n    let offsetZ;\n    let v;\n\n    this.angle = 0;\n    this.initialVel = CONST.BOUNCE_BACK_VELOCITY;\n\n    if (side instanceof User) {\n      offsetZ = net.z - CONST.NET_OFFSET;\n      v = -this.initialVel;\n    } else if (side instanceof Opponent) {\n      offsetZ = net.z + CONST.NET_OFFSET;\n      v = this.initialVel;\n    }\n\n    this.initial3dPos = new Position(\n      this.current3dPos.x,\n      -this.current3dPos.y,\n      offsetZ,\n    );\n    this.current3dPos = new Position(\n      this.current3dPos.x,\n      -this.current3dPos.y,\n      offsetZ,\n    );\n    this.velocity.z = v * Math.cos(this.angle);\n    this.time = 0;\n    this.bounceCount = 0;\n  };\n\n  /**\n   * Direct ball after collision with bat.\n   *\n   * @param {Player} side - Player object.\n   * @param {number} velocity - Initial velocity of ball.\n   * @param {number} sideAngle - Angle between x and z axis.\n   * @param {number} upAngle - Angle between z and y axis.\n   */\n  hit = (side, velocity, sideAngle, upAngle) => {\n    let offsetZ;\n    let v;\n\n    this.angle = CONST.ENV.toRadian(upAngle);\n    this.initialVel = velocity;\n\n    if (side instanceof User) {\n      offsetZ = side.position.z + 10;\n      v = this.initialVel;\n      this.velocity.x =\n        sideAngle > 0 ? Math.cos(sideAngle) : -Math.cos(sideAngle);\n    } else {\n      offsetZ = side.position.z - 10;\n      v = -this.initialVel;\n      this.velocity.x = 0;\n    }\n\n    this.initial3dPos = new Position(\n      this.current3dPos.x,\n      -this.current3dPos.y,\n      offsetZ,\n    );\n    this.current3dPos = new Position(\n      this.current3dPos.x,\n      -this.current3dPos.y,\n      offsetZ,\n    );\n\n    // Calculate z component velocity\n    this.velocity.z = v * Math.cos(this.angle);\n\n    this.time = 0;\n    this.bounceCount = 0;\n  };\n\n  /**\n   * Set position of ball.\n   *\n   * @param {Position} position - Position object.\n   */\n  setPosition = (position) => {\n    this.initial3dPos = new Position(position.x, position.y, position.z);\n    this.current3dPos = new Position(position.x, position.y, position.z);\n    this.bounceCount = 0;\n    this.time = 0;\n  };\n\n  /**\n   * Set values to serve ball.\n   *\n   * @param {number} velocity - Serve velocity.\n   * @param {number} sideAngle - Angle between x and z axis.\n   */\n  serve = (velocity, sideAngle) => {\n    this.initialVel = Math.abs(velocity);\n\n    if (sideAngle) {\n      this.velocity.x =\n        sideAngle > 0 ? Math.cos(sideAngle) : -Math.cos(sideAngle);\n    } else {\n      this.velocity.x = 0;\n    }\n\n    this.angle = CONST.SERVE_ANGLE;\n\n    // Calculate z component velocity\n    this.velocity.z = velocity * Math.cos(this.angle);\n  };\n\n  /**\n   * Check collision of ball with Player's bat.\n   *\n   * @param {Player} side - Player object.\n   * @returns {boolean} If collision or no collision.\n   */\n  checkCollision = (side) => {\n    const ball = this.current3dPos;\n    const ballY = Game.state.inPlay ? -ball.y : ball.y;\n\n    const bat = side.surface3d;\n\n    if (\n      ball.x >= bat.topLeft.x &&\n      ballY >= bat.topLeft.y &&\n      ball.x <= bat.topRight.x &&\n      ballY >= bat.topRight.y &&\n      ball.x <= bat.bottomRight.x &&\n      ballY <= bat.bottomRight.y &&\n      ball.x >= bat.bottomLeft.x &&\n      ballY <= bat.bottomLeft.y\n    ) {\n      if (side instanceof User) {\n        if (\n          ball.z <= side.position.z &&\n          ball.z >= side.position.z - CONST.BAT_THICKNESS\n        ) {\n          // position ball infront of bat\n          if (Game.state.inPlay) {\n            ball.z = side.position.z;\n          }\n\n          return true;\n        }\n      } else if (side instanceof Opponent) {\n        if (\n          ball.z >= side.position.z &&\n          ball.z <= side.position.z + CONST.BAT_THICKNESS\n        ) {\n          // position ball infront of bat\n          if (Game.state.inPlay) {\n            ball.z = side.position.z;\n          }\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * Check if ball is over board.\n   *\n   * @returns {boolean} Ball over board or not.\n   */\n  isBallInside = () => {\n    if (\n      this.current3dPos.x <= CONST.BOARD_RIGHT_X + CONST.BALL_MAX_RADIUS &&\n      this.current3dPos.x >= CONST.BOARD_LEFT_X - CONST.BALL_MAX_RADIUS &&\n      this.current3dPos.z <= CONST.BOARD_END + CONST.BALL_MAX_RADIUS &&\n      this.current3dPos.z >= CONST.BOARD_Z - CONST.BALL_MAX_RADIUS\n    ) {\n      // Set bounce level to table surface\n      this.bounceLevel = -CONST.BOARD_Y;\n\n      return true;\n    }\n\n    // Set bounce level to ground\n    this.bounceLevel = 0;\n\n    return false;\n  };\n\n  /**\n   * Check if ball crosses walls on background.\n   *\n   * @returns {boolean} Crosses or not.\n   */\n  ballOut = () => {\n    if (\n      this.current3dPos.x >= CONST.RIGHT_WALL ||\n      this.current3dPos.x <= CONST.LEFT_WALL ||\n      this.current3dPos.z <= 0 ||\n      this.current3dPos.z >= CONST.END_WALL\n    ) {\n      Game.state.ballIn = true;\n\n      return true;\n    }\n    Game.state.ballIn = false;\n\n    return false;\n  };\n}\n\nexport default Ball;\n","import * as CONST from '../constants';\nimport { Position, projection } from '../utils';\n\nclass Board {\n  constructor() {\n    this.width = CONST.BOARD_WIDTH;\n    this.length = CONST.BOARD_LENGTH;\n    this.thickness = CONST.BOARD_THICKNESS + CONST.BOARD_Y;\n    this.z = CONST.BOARD_Z;\n    this.borderWidth = CONST.BORDER_WIDTH;\n    this.y = CONST.BOARD_Y;\n\n    const leftX = CONST.HALF_CANVAS_WIDTH - CONST.BOARD_HALF_WIDTH;\n    const rightX = CONST.HALF_CANVAS_WIDTH + CONST.BOARD_HALF_WIDTH;\n\n    const midLeftX = leftX + CONST.BOARD_HALF_WIDTH - this.borderWidth / 2;\n    const midRightX = rightX - CONST.BOARD_HALF_WIDTH + this.borderWidth / 2;\n\n    this.surface3d = {\n      outer: [\n        new Position(leftX, this.y, this.z),\n        new Position(rightX, this.y, this.z),\n        new Position(rightX, this.y, this.length + this.z),\n        new Position(leftX, this.y, this.length + this.z),\n      ],\n\n      thickness: [\n        new Position(leftX, this.y, this.z),\n        new Position(rightX, this.y, this.z),\n        new Position(rightX, this.thickness, this.z),\n        new Position(leftX, this.thickness, this.z),\n      ],\n\n      inner: [\n        new Position(\n          leftX + this.borderWidth * 2,\n          this.y,\n          this.z + this.borderWidth,\n        ),\n        new Position(\n          rightX - this.borderWidth * 2,\n          this.y,\n          this.z + this.borderWidth,\n        ),\n        new Position(\n          rightX - this.borderWidth,\n          this.y,\n          this.length + this.z - this.borderWidth,\n        ),\n        new Position(\n          leftX + this.borderWidth,\n          this.y,\n          this.length + this.z - this.borderWidth,\n        ),\n      ],\n\n      midLine: [\n        new Position(midLeftX, this.y, this.z + 1),\n        new Position(midRightX, this.y, this.z + 1),\n        new Position(midRightX, this.y, this.length + this.z - 1),\n        new Position(midLeftX, this.y, this.length + this.z - 1),\n      ],\n\n      tableLeftStand: [\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING * 2,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING * 2,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n      ],\n\n      tableLeftThickness: [\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING * 2,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING * 2,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS,\n        ),\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING * 2,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS,\n        ),\n        new Position(\n          leftX + CONST.TABLE_STAND_PADDING * 2,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n      ],\n\n      tableRightStand: [\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING * 2,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING * 2,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n      ],\n\n      tableRightThickness: [\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING * 2,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING * 2,\n          this.thickness,\n          this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS,\n        ),\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING * 2,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS,\n        ),\n        new Position(\n          rightX - CONST.TABLE_STAND_PADDING * 2,\n          CONST.TABLE_HEIGHT,\n          this.z + CONST.TABLE_STAND_PADDING,\n        ),\n      ],\n    };\n\n    this.surface2d = {\n      outer: this.surface3d.outer.map(projection.get2dProjection),\n      inner: this.surface3d.inner.map(projection.get2dProjection),\n      thickness: this.surface3d.thickness.map(projection.get2dProjection),\n      midLine: this.surface3d.midLine.map(projection.get2dProjection),\n      tableLeftStand: this.surface3d.tableLeftStand.map(\n        projection.get2dProjection,\n      ),\n      tableLeftThickness: this.surface3d.tableLeftThickness.map(\n        projection.get2dProjection,\n      ),\n      tableRightStand: this.surface3d.tableRightStand.map(\n        projection.get2dProjection,\n      ),\n      tableRightThickness: this.surface3d.tableRightThickness.map(\n        projection.get2dProjection,\n      ),\n    };\n  }\n\n  // Draw outer surface of board (CONST.WHITE) on canvas\n  drawOuterSurface = (ctx) => {\n    const startPosition = this.surface2d.outer[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.outer) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.WHITE;\n    ctx.fill();\n    ctx.strokeStyle = CONST.BLACK_B;\n    ctx.stroke();\n    ctx.closePath();\n  };\n\n  // Draw inner surface of board (blue) on canvas\n  drawInnerSurface = (ctx) => {\n    const startPosition = this.surface2d.inner[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.inner) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BOARD_BACKGROUND;\n    ctx.fill();\n    // ctx.stroke();\n    ctx.closePath();\n  };\n\n  // Draw thickness of board on canvas\n  drawThickness = (ctx) => {\n    const startPosition = this.surface2d.thickness[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.thickness) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_C;\n    ctx.fill();\n    ctx.strokeStyle = CONST.BLACK_B;\n    ctx.stroke();\n    ctx.closePath();\n  };\n\n  // Draw CONST.WHITE middle line of board on canvas\n  drawMidLine = (ctx) => {\n    const startPosition = this.surface2d.midLine[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.midLine) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.WHITE;\n    ctx.fill();\n    // ctx.stroke();\n    ctx.closePath();\n  };\n\n  // Draw table stands on canvas\n  drawTableStand = (ctx) => {\n    let startPosition = this.surface2d.tableLeftStand[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableLeftStand) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_B;\n    ctx.fill();\n\n    startPosition = this.surface2d.tableLeftThickness[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableLeftThickness) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_A;\n    ctx.fill();\n\n    startPosition = this.surface2d.tableRightStand[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableRightStand) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_B;\n    ctx.fill();\n\n    startPosition = this.surface2d.tableRightThickness[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableRightThickness) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_A;\n    ctx.fill();\n  };\n\n  // Draw table and board on canvas\n  draw = (ctx) => {\n    this.drawTableStand(ctx);\n    this.drawOuterSurface(ctx);\n    this.drawInnerSurface(ctx);\n    this.drawThickness(ctx);\n    this.drawMidLine(ctx);\n  };\n}\n\nexport default Board;\n","import * as CONST from './constants';\nimport { Position, projection } from './utils';\n\nexport class Floor {\n  constructor() {\n    const y = CONST.TABLE_HEIGHT;\n\n    this.surface3d = {\n      topLeft: new Position(CONST.LEFT_WALL, y, CONST.END_WALL),\n      topRight: new Position(CONST.RIGHT_WALL, y, CONST.END_WALL),\n      bottomRight: new Position(\n        CONST.RIGHT_WALL,\n        y,\n        projection.camera.position.z + 1,\n      ),\n      bottomLeft: new Position(\n        CONST.LEFT_WALL,\n        y,\n        projection.camera.position.z + 1,\n      ),\n    };\n\n    this.surface2d = {\n      topLeft: projection.get2dProjection(this.surface3d.topLeft),\n      topRight: projection.get2dProjection(this.surface3d.topRight),\n      bottomRight: projection.get2dProjection(this.surface3d.bottomRight),\n      bottomLeft: projection.get2dProjection(this.surface3d.bottomLeft),\n    };\n  }\n\n  // Draw floor on canvas\n  draw = (ctx) => {\n    ctx.beginPath();\n    ctx.moveTo(this.surface2d.topLeft.x, this.surface2d.topLeft.y);\n    ctx.lineTo(this.surface2d.topRight.x, this.surface2d.topRight.y);\n    ctx.lineTo(this.surface2d.bottomRight.x, this.surface2d.bottomRight.y);\n    ctx.lineTo(this.surface2d.bottomLeft.x, this.surface2d.bottomLeft.y);\n    ctx.lineTo(this.surface2d.topLeft.x, this.surface2d.topLeft.y);\n    ctx.fillStyle = '#90A4AE';\n    ctx.fill();\n    ctx.closePath();\n  };\n}\n\nexport class Wall {\n  constructor() {\n    const y = CONST.TABLE_HEIGHT;\n    const top = projection.camera.position.y;\n\n    this.surface3d = {\n      leftWall: [\n        new Position(CONST.LEFT_WALL, y, projection.camera.position.z + 1),\n        new Position(CONST.LEFT_WALL, y, CONST.END_WALL),\n        new Position(CONST.LEFT_WALL, top, CONST.END_WALL),\n        new Position(CONST.LEFT_WALL, top, projection.camera.position.z + 1),\n      ],\n      backWall: [\n        new Position(CONST.LEFT_WALL, y, CONST.END_WALL),\n        new Position(CONST.LEFT_WALL, top, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, top, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, y, CONST.END_WALL),\n      ],\n      rightWall: [\n        new Position(CONST.RIGHT_WALL, y, projection.camera.position.z + 1),\n        new Position(CONST.RIGHT_WALL, y, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, top, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, top, projection.camera.position.z + 1),\n      ],\n    };\n\n    this.surface2d = {\n      leftWall: this.surface3d.leftWall.map(projection.get2dProjection),\n      backWall: this.surface3d.backWall.map(projection.get2dProjection),\n      rightWall: this.surface3d.rightWall.map(projection.get2dProjection),\n    };\n  }\n\n  // Draw leftside wall on canvas\n  drawLeftWall = (ctx) => {\n    const startPosition = this.surface2d.leftWall[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.leftWall) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = '#BDBDBD';\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  // Draw backside wall on canvas\n  drawBackWall = (ctx) => {\n    const startPosition = this.surface2d.backWall[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.backWall) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = '#BDBDBD';\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  // Draw rightside wall on canvas\n  drawRightWall = (ctx) => {\n    const startPosition = this.surface2d.rightWall[0];\n\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.rightWall) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = '#BDBDBD';\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  // Draw walls on canvas\n  draw = (ctx) => {\n    this.drawLeftWall(ctx);\n    this.drawBackWall(ctx);\n    this.drawRightWall(ctx);\n  };\n}\n","import { Game } from '../game';\nimport User from '../players/user';\nimport * as CONST from '../constants';\nimport Opponent from '../players/opponent';\nimport { sprite, clapHigh, clapLow } from '../assets';\n\nclass Scoreboard {\n  constructor(position, firstServer, { playerName, bestOfGames }, endFn) {\n    this.position = position;\n    this.firstServer = firstServer;\n    this.state = {\n      serveChange: 2,\n      server: this.firstServer,\n      driver: this.firstServer,\n      deuce: false,\n    };\n    this.scores = {\n      current: {\n        player: 0,\n        opponent: 0,\n      },\n      games: {\n        player: 0,\n        opponent: 0,\n      },\n    };\n    this.bestOfGames = bestOfGames;\n    this.playerName = playerName;\n    this.endFn = endFn;\n  }\n\n  // Draw scoreboard sprite to canvas\n  drawCard = (ctx) => {\n    if (this.state.server instanceof User) {\n      ctx.drawImage(\n        sprite,\n        Scoreboard.sprite.player.sx,\n        Scoreboard.sprite.player.sy,\n        Scoreboard.sprite.player.sw,\n        Scoreboard.sprite.player.sh,\n        this.position.x,\n        this.position.y,\n        Scoreboard.sprite.player.sw,\n        Scoreboard.sprite.player.sh,\n      );\n    } else if (this.state.server instanceof Opponent) {\n      ctx.drawImage(\n        sprite,\n        Scoreboard.sprite.opponent.sx,\n        Scoreboard.sprite.opponent.sy,\n        Scoreboard.sprite.opponent.sw,\n        Scoreboard.sprite.opponent.sh,\n        this.position.x,\n        this.position.y,\n        Scoreboard.sprite.opponent.sw,\n        Scoreboard.sprite.opponent.sh,\n      );\n    }\n  };\n\n  // Draw scoreboard text to canvas\n  drawScore = (ctx) => {\n    ctx.beginPath();\n    ctx.font = 'bold 20px Arial';\n    ctx.fillStyle = CONST.WHITE;\n    ctx.fillText(this.playerName, 70, 52);\n    ctx.fillText('COMPUTER', 54, 52 * 2);\n    ctx.fillText('COMPUTER', 54, 52 * 2);\n    ctx.fillText(this.scores.games.player, 304, 52);\n    ctx.fillText(this.scores.games.opponent, 288, 52 * 2);\n    ctx.fillStyle = CONST.BLACK_A;\n    ctx.fillText(this.scores.current.player, 364, 52);\n    ctx.fillText(this.scores.current.opponent, 348, 52 * 2);\n    ctx.closePath();\n  };\n\n  // Draw scoreboard to canvas\n  draw = (ctx) => {\n    this.drawCard(ctx);\n    this.drawScore(ctx);\n  };\n\n  // Increase game scores of players on scoreboard\n  updateScore = (player, opponent) => {\n    const bounce = `${player.bounce}${opponent.bounce}`;\n\n    if (Game.state.serveSuccess) {\n      if (this.state.driver === player) {\n        if (bounce === '01') {\n          this.scores.current.player++;\n          clapHigh.play();\n        } else {\n          this.scores.current.opponent++;\n          clapLow.play();\n        }\n      } else if (this.state.driver === opponent) {\n        if (bounce === '10') {\n          this.scores.current.opponent++;\n          clapLow.play();\n        } else {\n          this.scores.current.player++;\n          clapHigh.play();\n        }\n      }\n    } else {\n      if (this.state.server === player) {\n        if (bounce === '11') {\n          this.scores.current.player++;\n          clapHigh.play();\n        } else {\n          this.scores.current.opponent++;\n          clapLow.play();\n        }\n      } else if (this.state.server === opponent) {\n        if (bounce === '11') {\n          this.scores.current.opponent++;\n          clapLow.play();\n        } else {\n          this.scores.current.player++;\n          clapHigh.play();\n        }\n      }\n    }\n\n    // Condition for deuce game\n    if (\n      this.scores.current.player === 10 &&\n      this.scores.current.opponent === 10\n    ) {\n      this.state.deuce = true;\n      this.state.serveChange = 1;\n    }\n  };\n\n  /**\n   * Check for winning conditions.\n   *\n   * @param {function} gameOver - Game over callback function.\n   */\n  checkWin = (gameOver) => {\n    if (!this.state.deuce) {\n      if (this.scores.current.player === 11) {\n        this.scores.games.player++;\n        gameOver();\n\n        return;\n      }\n\n      if (this.scores.current.opponent === 11) {\n        this.scores.games.opponent++;\n        gameOver();\n\n        return;\n      }\n    } else {\n      const dPoints = this.scores.current.player - this.scores.current.opponent;\n\n      if (Math.abs(dPoints) === 2) {\n        const winner = dPoints > 0 ? 'player' : 'opponent';\n\n        this.scores.games[winner]++;\n        gameOver();\n      }\n    }\n  };\n\n  // Check for Best of Games completion\n  allOver = () => {\n    const playerWins = this.scores.games.player;\n    const opponentWins = this.scores.games.opponent;\n    const requiredWins = Math.ceil(this.bestOfGames / 2);\n\n    if (playerWins === requiredWins) {\n      Game.state.isOver = true;\n      this.endFn(this.playerName);\n\n      return true;\n    }\n\n    if (opponentWins === requiredWins) {\n      Game.state.isOver = true;\n      this.endFn('COMPUTER');\n\n      return true;\n    }\n\n    return false;\n  };\n\n  // Set server for game\n  server = (player, opponent) => {\n    const points = this.scores.current.player + this.scores.current.opponent;\n\n    if (points % this.state.serveChange === 0) {\n      const side = this.state.server === player ? opponent : player;\n\n      this.state.server = side;\n      this.state.driver = side;\n    }\n  };\n\n  // Set scoreboard to initial state\n  resetState = () => {\n    this.state = {\n      serveChange: 2,\n      server: this.firstServer,\n      driver: this.firstServer,\n    };\n    this.scores.current.player = 0;\n    this.scores.current.opponent = 0;\n  };\n}\n\nScoreboard.sprite = {\n  player: {\n    sx: 0,\n    sy: 316,\n    sw: 390,\n    sh: 100,\n  },\n  opponent: {\n    sx: 0,\n    sy: 417,\n    sw: 390,\n    sh: 100,\n  },\n};\n\nexport default Scoreboard;\n","import User from './players/user';\nimport Net from './components/net';\nimport * as CONST from './constants';\nimport Ball from './components/ball';\nimport Board from './components/table';\nimport { Floor, Wall } from './background';\nimport Opponent from './players/opponent';\nimport { Position, projection } from './utils';\nimport Scoreboard from './components/scoreboard';\nimport { resetGame, startGame, initMouseEvent } from './game';\nimport { initAssets, removeAssetsEvent, referee } from './assets';\n\nconst canvas = document.getElementById('game');\n\ncanvas.width = CONST.CANVAS_WIDTH;\ncanvas.height = CONST.CANVAS_HEIGHT;\n\nconst ctx = canvas.getContext('2d');\n\nconst layoutElement = document.body.querySelector('.layout');\nconst infoElement = document.body.querySelector('.info');\nconst introElement = document.body.querySelector('.intro');\nconst form = introElement.querySelector('form');\n\nconst App = {\n  state: CONST.STATE_INIT,\n  assets: {\n    total: 7,\n    loadCount: 0,\n  },\n};\n\n// Game components\nlet floor, walls, table, net, ball, player, opponent, scoreboard;\nconst obj = {\n  floor,\n  walls,\n  table,\n  net,\n  ball,\n  player,\n  opponent,\n  scoreboard,\n};\n\n// Check for load of assets\nfunction loadComplete() {\n  App.assets.loadCount++;\n\n  if (App.assets.loadCount >= App.assets.total) {\n    App.state = CONST.STATE_LOADED;\n    removeAssetsEvent(loadComplete);\n    initMouseEvent();\n    run();\n  }\n}\n\n// display DOM on pause\nfunction onPause() {\n  layoutElement.style.display = 'block';\n  infoElement.style.display = 'table';\n  infoElement.querySelector('.content').innerHTML =\n    'Press ESC to pause / resume';\n}\n\n// remove DOM on resume\nfunction onResume() {\n  layoutElement.style.display = 'none';\n  infoElement.style.display = 'none';\n}\n\nfunction handleFormSubmit(e) {\n  e.preventDefault();\n\n  introElement.style.display = 'none';\n  layoutElement.style.display = 'none';\n\n  const config = {\n    playerName: e.target.elements.player.value.toUpperCase(),\n    bestOfGames: parseInt(e.target.elements.bestof.value),\n  };\n\n  initGame(config);\n}\n\n// Display intro components and configure game\nfunction displayIntro() {\n  initComponents();\n\n  infoElement.style.display = 'none';\n  introElement.style.display = 'table';\n\n  form.removeEventListener('submit', handleFormSubmit);\n  form.addEventListener('submit', handleFormSubmit);\n}\n\n// Initialize and draw game components on canvas\nfunction initComponents() {\n  ctx.clearRect(\n    -500,\n    -500,\n    CONST.CANVAS_WIDTH + 500,\n    CONST.CANVAS_HEIGHT + 500,\n  );\n\n  projection.camera.position.x = CONST.HALF_CANVAS_WIDTH;\n  projection.camera.position.y =\n    CONST.CANVAS_HEIGHT <= -CONST.MAX_CAMERA_Y\n      ? -CONST.CANVAS_HEIGHT\n      : CONST.MAX_CAMERA_Y;\n  projection.viewplane.x = CONST.HALF_CANVAS_WIDTH;\n\n  const ballStartPosition = new Position(\n    CONST.HALF_CANVAS_WIDTH,\n    CONST.BOARD_Y - CONST.BALL_START_HEIGHT,\n    CONST.BOARD_Z,\n  );\n  const playerPosition = new Position(\n    0,\n    CONST.BOARD_Y - CONST.BALL_START_HEIGHT,\n    CONST.PLAYER_Z_POSITION,\n  );\n  const opponentPosition = new Position(\n    1000,\n    CONST.BOARD_Y - CONST.BALL_START_HEIGHT,\n    CONST.OPPONENT_Z_POSITION,\n  );\n\n  obj.floor = new Floor();\n  obj.walls = new Wall();\n  obj.table = new Board();\n  obj.net = new Net();\n  obj.ball = new Ball(ballStartPosition);\n  obj.player = new User(playerPosition);\n  obj.opponent = new Opponent(opponentPosition);\n\n  obj.floor.draw(ctx);\n  obj.walls.draw(ctx);\n  obj.table.draw(ctx);\n  obj.net.draw(ctx);\n}\n\n// Initialize game with configuration\nfunction initGame(config) {\n  const scoreboardPosition = new Position(20, 20);\n\n  obj.scoreboard = new Scoreboard(\n    scoreboardPosition,\n    obj.player,\n    config,\n    displayWin,\n  );\n\n  referee.play();\n  startGame(ctx, obj, onPause, onResume);\n}\n\n// Display winner component for game\nfunction displayWin(player) {\n  referee.play();\n\n  const playAgainBtn = document.createElement('button');\n  const winText = '<div class=\"row\"><h1>' + player + ' WINS!' + '</h1></div>';\n  const content = infoElement.querySelector('.content');\n\n  playAgainBtn.classList.add('btn');\n  playAgainBtn.innerText = 'NEW GAME';\n  content.innerHTML = winText;\n  content.appendChild(playAgainBtn);\n  layoutElement.style.display = 'block';\n  infoElement.style.display = 'table';\n\n  playAgainBtn.addEventListener('click', () => {\n    resetGame();\n    displayIntro();\n  });\n}\n\nfunction run() {\n  switch (App.state) {\n    case CONST.STATE_INIT:\n      initAssets(loadComplete);\n      break;\n    case CONST.STATE_LOADED:\n      displayIntro();\n      break;\n  }\n}\n\nrun();\n"]}