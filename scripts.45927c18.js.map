{"version":3,"sources":["scripts/constants.js","scripts/utils.js","scripts/background.js","scripts/components/table.js","scripts/assets.js","scripts/components/net.js","scripts/game.js","scripts/components/player.js","scripts/players/user.js","scripts/players/opponent.js","scripts/components/ball.js","scripts/components/scoreboard.js","scripts/index.js"],"names":["STATE_INIT","STATE_LOADED","ENV","gravity","toRadian","deg","Math","PI","CANVAS_WIDTH","window","innerWidth","CANVAS_HEIGHT","innerHeight","HALF_CANVAS_WIDTH","HALF_CANVAS_HEIGHT","MAX_CAMERA_Y","BOARD_BACKGROUND","BALL_BACKGROUND","BALL_BORDER","BLACK_A","BLACK_B","BLACK_C","WHITE","TABLE_HEIGHT","TABLE_STAND_PADDING","BOARD_WIDTH","BOARD_LENGTH","BOARD_HALF_LENGTH","BOARD_HALF_WIDTH","BOARD_THICKNESS","BOARD_LEFT_X","BOARD_RIGHT_X","BOARD_Y","BOARD_Z","BORDER_WIDTH","BOARD_OFFSET","BOARD_END","NET_HEIGHT","NET_Z","NET_OFFSET","BALL_START_HEIGHT","BALL_MAX_RADIUS","BALL_MIN_RADIUS","BALL_ANGLE","BALL_INITAL_VEL","SLOPE","TIME","BOUNCE_BACK_VELOCITY","BAT_LENGTH","BAT_WIDTH","BAT_THICKNESS","BAT_INITIAL_Z","PLAYER_Z_POSITION","OPPONENT_Z_POSITION","BOUNDARY_PADDING","SERVE_ANGLE","VELOCITY","UP_ANGLE","SIDE_ANGLE","MAX_MOVE_VELOCITY","LEFT_WALL","RIGHT_WALL","END_WALL","Position","x","y","z","position","sqrt","projection","CONST","position3d","d","subtract","camera","vz","viewplane","bx","by","dy","dz","dx","ax","ay","az","clamp","min","max","value","Floor","ctx","beginPath","moveTo","surface2d","topLeft","lineTo","topRight","bottomRight","bottomLeft","fillStyle","fill","closePath","surface3d","get2dProjection","Wall","startPosition","leftWall","point","backWall","rightWall","drawLeftWall","drawBackWall","drawRightWall","top","map","Board","outer","strokeStyle","stroke","inner","thickness","midLine","tableLeftStand","tableLeftThickness","tableRightStand","tableRightThickness","drawTableStand","drawOuterSurface","drawInnerSurface","drawThickness","drawMidLine","width","length","borderWidth","leftX","rightX","midLeftX","midRightX","sprite","referee","bounceIn","bounceOut","batHit","clapHigh","clapLow","initAssets","callbackFn","Image","src","require","onload","document","createElement","body","appendChild","addEventListener","setAttribute","removeAssetsEvent","removeEventListener","Net","height","get2dDistance","spriteWidth","netImageLeft","netImageRight","steps","floor","i","drawImage","barLeft","sx","sy","sw","sh","barRight","strip","ball","playBall","current3dPos","walls","table","net","player","opponent","scoreboard","animationId","lastFrameTime","onPause","onResume","Game","resetGame","startGame","gameCtx","obj","pauseFn","resumeFn","initEscapeEvent","renderGame","drawSequence","abs","draw","clearRect","state","begin","isOver","updateStates","served","inPlay","hitBall","serveBall","performance","now","requestAnimationFrame","cancelAnimationFrame","resetBounceCount","resetBounce","server","setPosition","batDirection","movementDirection","batActive","checkCollision","play","serve","opponentMovement","pos","serveSuccess","hit","getParameters","driver","foul","bounceCount","bounceBack","ballOut","updateScore","checkWin","gameOver","resetState","allOver","removeEscapeEvent","slope","velocity","destination","right","left","animate","logBounce","initMouseEvent","e","handleBatMovement","escapeHandler","pause","key","Player","halfSize","long","loadSurface","save","translate","rotate","getRotationAngle","bat","restore","bounce","norm","angle","acos","ballPos","selfHalf","bottom","size","User","dt","prevPositionX","prevPositionZ","sideAngle","atan","event","preventDefault","stopPropagation","get3dPosition","clientX","clientY","fitToCourt","Opponent","random","time","easeTranslate","start","elapsed","progress","total","easing","pow","easeOut","Ball","startPos","current3dY","current2dPos","radius","getRadius","drawShadow","arc","lastPosition","get3dDistance","rebound","ballIn","initialVel","initial3dPos","bounceLevel","getBounceAngle","vy","sin","isBallInside","shadow","ellipse","side","offsetZ","v","cos","upAngle","ballY","Scoreboard","firstServer","endFn","playerName","bestOfGames","font","fillText","scores","games","current","drawCard","drawScore","deuce","serveChange","dPoints","winner","playerWins","opponentWins","requiredWins","ceil","points","canvas","getElementById","getContext","layoutElement","querySelector","infoElement","introElement","form","App","loadComplete","assets","loadCount","run","style","display","innerHTML","handleFormSubmit","initGame","target","elements","toUpperCase","parseInt","bestof","displayIntro","initComponents","ballStartPosition","playerPosition","opponentPosition","config","scoreboardPosition","displayWin","playAgainBtn","winText","content","classList","add","innerText"],"mappings":"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","file":"scripts.45927c18.js","sourceRoot":"../src","sourcesContent":["export const STATE_INIT = 1;\nexport const STATE_LOADED = 2;\n\n// environment export constants\nexport const ENV = {\n  gravity: 9.82,\n  toRadian: (deg) => {\n    return (deg * Math.PI) / 180;\n  },\n};\n\n// canvas export constants\nexport const CANVAS_WIDTH = window.innerWidth;\nexport const CANVAS_HEIGHT = window.innerHeight;\nexport const HALF_CANVAS_WIDTH = CANVAS_WIDTH / 2;\nexport const HALF_CANVAS_HEIGHT = CANVAS_HEIGHT / 2;\nexport const MAX_CAMERA_Y = -1200;\n\n// colors\nexport const BOARD_BACKGROUND = \"#284088\";\nexport const BALL_BACKGROUND = \"#FFD740\";\nexport const BALL_BORDER = \"#FFC400\";\nexport const BLACK_A = \"#000000\";\nexport const BLACK_B = \"#212121\";\nexport const BLACK_C = \"#424242\";\nexport const WHITE = \"#FFFFFF\";\n\n// board export constants\nexport const TABLE_HEIGHT = 0;\nexport const TABLE_STAND_PADDING = 40;\nexport const BOARD_WIDTH = 800;\nexport const BOARD_LENGTH = (BOARD_WIDTH * 6) / 5;\nexport const BOARD_HALF_LENGTH = BOARD_LENGTH / 2;\nexport const BOARD_HALF_WIDTH = BOARD_WIDTH / 2;\nexport const BOARD_THICKNESS = 20;\nexport const BOARD_LEFT_X = HALF_CANVAS_WIDTH - BOARD_HALF_WIDTH;\nexport const BOARD_RIGHT_X = HALF_CANVAS_WIDTH + BOARD_HALF_WIDTH;\nexport const BOARD_Y = -300;\nexport const BOARD_Z = 160;\nexport const BORDER_WIDTH = 10;\nexport const BOARD_OFFSET = 160;\nexport const BOARD_END = BOARD_LENGTH + BOARD_Z;\nexport const NET_HEIGHT = 90;\nexport const NET_Z = BOARD_Z + BOARD_HALF_LENGTH;\nexport const NET_OFFSET = 50;\n\n// ball export constants and defaults\nexport const BALL_START_HEIGHT = 100; // vertical height from the board\nexport const BALL_MAX_RADIUS = 14;\nexport const BALL_MIN_RADIUS = 6;\nexport const BALL_ANGLE = ENV.toRadian(30);\nexport const BALL_INITAL_VEL = 100;\nexport const SLOPE =\n  (BALL_MIN_RADIUS - BALL_MAX_RADIUS) / (BOARD_LENGTH - BOARD_Z);\nexport const TIME = 0.25;\nexport const BOUNCE_BACK_VELOCITY = 40;\n\n// bat export constants and defaults\nexport const BAT_LENGTH = 207;\nexport const BAT_WIDTH = 124;\nexport const BAT_THICKNESS = 50;\nexport const BAT_INITIAL_Z = 120;\n\n// player export constants and defaults\nexport const PLAYER_Z_POSITION = BOARD_Z - 100;\nexport const OPPONENT_Z_POSITION = BOARD_LENGTH + BOARD_Z;\nexport const BOUNDARY_PADDING = 100;\n\n// gameplay export constants\nexport const SERVE_ANGLE = ENV.toRadian(-50);\nexport const VELOCITY = 85;\nexport const UP_ANGLE = 30;\nexport const SIDE_ANGLE = 0;\nexport const MAX_MOVE_VELOCITY = 1200;\n\n//background export constants\nexport const LEFT_WALL = HALF_CANVAS_WIDTH - BOARD_WIDTH * 2;\nexport const RIGHT_WALL = HALF_CANVAS_WIDTH + BOARD_WIDTH * 2;\nexport const END_WALL = BOARD_END + BOARD_WIDTH * 2;\n","import * as CONST from './constants';\n\nexport class Position {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /**\n   * Subtract next position from this position\n   * @param {Position} position - position to be subtacted\n   * @returns {Position} subtracted new position\n   */\n  subtract = (position) => {\n    let x = this.x - position.x;\n    let y = this.y - position.y;\n    let z = this.z - position.z;\n\n    return new Position(x, y, z);\n  }\n\n  /**\n   * Get distance from this position to next positon in space\n   * @param {Position} position - position in space\n   * @returns {number} distance from this position to next position\n   */\n  get3dDistance = (position) => {\n    let x = this.x - position.x;\n    let y = this.y - position.y;\n    let z = this.z - position.z;\n\n    return (Math.sqrt(x * x + y * y + z * z));\n  }\n\n  /**\n   * Get distance from this position to next positon in paper\n   * @param {Position} position - position in paper\n   * @returns {number} distance from this position to next position\n   */\n  get2dDistance = (position) => {\n    let x = this.x - position.x;\n    let y = this.y - position.y;\n\n    return (Math.sqrt(x * x + y * y));\n  }\n}\n\nexport const projection = {\n  'camera': {\n    'position': new Position(0, CONST.MAX_CAMERA_Y, -300)\n  },\n\n  'viewplane': new Position(0, 0, 500),\n\n  /**\n   * Get projection of 3D position into 2D position on plane\n   * @param {Position} position - 3D position\n   * @returns {Position} 2D position\n   */\n  'get2dProjection': (position3d) => {\n    let d = position3d.subtract(projection.camera.position);\n    let vz = projection.viewplane.z / d.z;\n    let bx = vz * d.x + projection.viewplane.x;\n    let by = vz * d.y + projection.viewplane.y;\n\n    return new Position(bx, by);\n  },\n\n  /**\n   * Get 3D position from 2D position on plane\n   * @param {number} bx - x coordinate\n   * @param {number} by - y coordinate\n   * @returns {Position} 3D position\n   */\n  'get3dPosition': (bx, by) => {\n\n    let dy = (-CONST.BALL_START_HEIGHT + CONST.BOARD_Y) - projection.camera.position.y;\n    let dz = projection.viewplane.z * dy / (by - projection.viewplane.y);\n    let dx = ((bx - projection.viewplane.x) * dz / projection.viewplane.z);\n\n    let ax = projection.camera.position.x + dx;\n    let ay = projection.camera.position.y + dy;\n    let az = projection.camera.position.z + dz;\n\n    return new Position(ax, ay, az);\n  }\n};\n\n/**\n * Limit number inbetween range\n * @param {number} min - Minimum value\n * @param {number} max - Maximum value\n * @returns {number} number between min and max\n */\nexport function clamp(min, max, value) {\n  return Math.min(Math.max(value, min), max);\n}\n","import * as CONST from './constants';\nimport { Position, projection } from './utils';\n\nexport class Floor {\n  constructor() {\n    const y = CONST.TABLE_HEIGHT;\n\n    this.surface3d = {\n      'topLeft': new Position(CONST.LEFT_WALL, y, CONST.END_WALL),\n      'topRight': new Position(CONST.RIGHT_WALL, y, CONST.END_WALL),\n      'bottomRight': new Position(CONST.RIGHT_WALL, y, projection.camera.position.z + 1),\n      'bottomLeft': new Position(CONST.LEFT_WALL, y, projection.camera.position.z + 1)\n    }\n\n    this.surface2d = {\n      'topLeft': projection.get2dProjection(this.surface3d.topLeft),\n      'topRight': projection.get2dProjection(this.surface3d.topRight),\n      'bottomRight': projection.get2dProjection(this.surface3d.bottomRight),\n      'bottomLeft': projection.get2dProjection(this.surface3d.bottomLeft)\n    }\n  }\n\n  // Draw floor on canvas\n  draw = (ctx) => {\n    ctx.beginPath();\n    ctx.moveTo(this.surface2d.topLeft.x, this.surface2d.topLeft.y);\n    ctx.lineTo(this.surface2d.topRight.x, this.surface2d.topRight.y);\n    ctx.lineTo(this.surface2d.bottomRight.x, this.surface2d.bottomRight.y);\n    ctx.lineTo(this.surface2d.bottomLeft.x, this.surface2d.bottomLeft.y);\n    ctx.lineTo(this.surface2d.topLeft.x, this.surface2d.topLeft.y);\n    ctx.fillStyle = '#90A4AE';\n    ctx.fill();\n    ctx.closePath();\n  }\n}\n\nexport class Wall {\n  constructor() {\n    const y = CONST.TABLE_HEIGHT;\n    const top = projection.camera.position.y;\n\n    this.surface3d = {\n      'leftWall': [\n        new Position(CONST.LEFT_WALL, y, projection.camera.position.z + 1),\n        new Position(CONST.LEFT_WALL, y, CONST.END_WALL),\n        new Position(CONST.LEFT_WALL, top, CONST.END_WALL),\n        new Position(CONST.LEFT_WALL, top, projection.camera.position.z + 1)\n      ],\n      'backWall': [\n        new Position(CONST.LEFT_WALL, y, CONST.END_WALL),\n        new Position(CONST.LEFT_WALL, top, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, top, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, y, CONST.END_WALL)\n      ],\n      'rightWall': [\n        new Position(CONST.RIGHT_WALL, y, projection.camera.position.z + 1),\n        new Position(CONST.RIGHT_WALL, y, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, top, CONST.END_WALL),\n        new Position(CONST.RIGHT_WALL, top, projection.camera.position.z + 1)\n      ]\n    }\n\n    this.surface2d = {\n      'leftWall': this.surface3d.leftWall.map(projection.get2dProjection),\n      'backWall': this.surface3d.backWall.map(projection.get2dProjection),\n      'rightWall': this.surface3d.rightWall.map(projection.get2dProjection)\n    }\n  }\n\n  // Draw leftside wall on canvas\n  drawLeftWall = (ctx) => {\n    let startPosition = this.surface2d.leftWall[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.leftWall) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = '#BDBDBD';\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  // Draw backside wall on canvas\n  drawBackWall = (ctx) => {\n    let startPosition = this.surface2d.backWall[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.backWall) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = '#BDBDBD';\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  // Draw rightside wall on canvas\n  drawRightWall = (ctx) => {\n    let startPosition = this.surface2d.rightWall[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.rightWall) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = '#BDBDBD';\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  // Draw walls on canvas\n  draw = (ctx) => {\n    this.drawLeftWall(ctx);\n    this.drawBackWall(ctx);\n    this.drawRightWall(ctx);\n  }\n\n}","import * as CONST from '../constants';\nimport { Position, projection } from '../utils';\n\nclass Board {\n  constructor() {\n    this.width = CONST.BOARD_WIDTH;\n    this.length = CONST.BOARD_LENGTH;\n    this.thickness = CONST.BOARD_THICKNESS + CONST.BOARD_Y;\n    this.z = CONST.BOARD_Z;\n    this.borderWidth = CONST.BORDER_WIDTH;\n    this.y = CONST.BOARD_Y;\n\n    const leftX = CONST.HALF_CANVAS_WIDTH - CONST.BOARD_HALF_WIDTH;\n    const rightX = CONST.HALF_CANVAS_WIDTH + CONST.BOARD_HALF_WIDTH;\n\n    const midLeftX = leftX + CONST.BOARD_HALF_WIDTH - this.borderWidth / 2;\n    const midRightX = rightX - CONST.BOARD_HALF_WIDTH + this.borderWidth / 2;\n\n    this.surface3d = {\n      'outer': [\n        new Position(leftX, this.y, this.z),\n        new Position(rightX, this.y, this.z),\n        new Position(rightX, this.y, this.length + this.z),\n        new Position(leftX, this.y, this.length + this.z)\n      ],\n\n      'thickness': [\n        new Position(leftX, this.y, this.z),\n        new Position(rightX, this.y, this.z),\n        new Position(rightX, this.thickness, this.z),\n        new Position(leftX, this.thickness, this.z)\n      ],\n\n      'inner': [\n        new Position(leftX + this.borderWidth * 2, this.y, this.z + this.borderWidth),\n        new Position(rightX - this.borderWidth * 2, this.y, this.z + this.borderWidth),\n        new Position(rightX - this.borderWidth, this.y, this.length + this.z - this.borderWidth),\n        new Position(leftX + this.borderWidth, this.y, this.length + this.z - this.borderWidth)\n      ],\n\n      'midLine': [\n        new Position(midLeftX, this.y, this.z + 1),\n        new Position(midRightX, this.y, this.z + 1),\n        new Position(midRightX, this.y, this.length + this.z - 1),\n        new Position(midLeftX, this.y, this.length + this.z - 1)\n      ],\n\n      'tableLeftStand': [\n        new Position(leftX + CONST.TABLE_STAND_PADDING, this.thickness, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(leftX + CONST.TABLE_STAND_PADDING * 2, this.thickness, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(leftX + CONST.TABLE_STAND_PADDING * 2, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(leftX + CONST.TABLE_STAND_PADDING, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING)\n      ],\n\n      'tableLeftThickness': [\n        new Position(leftX + CONST.TABLE_STAND_PADDING * 2, this.thickness, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(leftX + CONST.TABLE_STAND_PADDING * 2, this.thickness, this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS),\n        new Position(leftX + CONST.TABLE_STAND_PADDING * 2, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS),\n        new Position(leftX + CONST.TABLE_STAND_PADDING * 2, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING)\n      ],\n\n      'tableRightStand': [\n        new Position(rightX - CONST.TABLE_STAND_PADDING, this.thickness, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(rightX - CONST.TABLE_STAND_PADDING * 2, this.thickness, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(rightX - CONST.TABLE_STAND_PADDING * 2, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(rightX - CONST.TABLE_STAND_PADDING, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING)\n      ],\n\n      'tableRightThickness': [\n        new Position(rightX - CONST.TABLE_STAND_PADDING * 2, this.thickness, this.z + CONST.TABLE_STAND_PADDING),\n        new Position(rightX - CONST.TABLE_STAND_PADDING * 2, this.thickness, this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS),\n        new Position(rightX - CONST.TABLE_STAND_PADDING * 2, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING + CONST.BOARD_THICKNESS),\n        new Position(rightX - CONST.TABLE_STAND_PADDING * 2, CONST.TABLE_HEIGHT, this.z + CONST.TABLE_STAND_PADDING)\n      ],\n    }\n\n    this.surface2d = {\n      'outer': this.surface3d.outer.map(projection.get2dProjection),\n      'inner': this.surface3d.inner.map(projection.get2dProjection),\n      'thickness': this.surface3d.thickness.map(projection.get2dProjection),\n      'midLine': this.surface3d.midLine.map(projection.get2dProjection),\n      'tableLeftStand': this.surface3d.tableLeftStand.map(projection.get2dProjection),\n      'tableLeftThickness': this.surface3d.tableLeftThickness.map(projection.get2dProjection),\n      'tableRightStand': this.surface3d.tableRightStand.map(projection.get2dProjection),\n      'tableRightThickness': this.surface3d.tableRightThickness.map(projection.get2dProjection)\n    }\n  }\n\n  // Draw outer surface of board (CONST.WHITE) on canvas\n  drawOuterSurface = (ctx) => {\n\n    let startPosition = this.surface2d.outer[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.outer) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.WHITE;\n    ctx.fill();\n    ctx.strokeStyle = CONST.BLACK_B;\n    ctx.stroke();\n    ctx.closePath();\n  \n  }\n\n  // Draw inner surface of board (blue) on canvas\n  drawInnerSurface = (ctx) => {\n    let startPosition = this.surface2d.inner[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.inner) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BOARD_BACKGROUND;\n    ctx.fill();\n    // ctx.stroke();\n    ctx.closePath();\n  }\n\n  // Draw thickness of board on canvas\n  drawThickness = (ctx) => {\n    let startPosition = this.surface2d.thickness[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.thickness) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_C;\n    ctx.fill();\n    ctx.strokeStyle = CONST.BLACK_B;\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  // Draw CONST.WHITE middle line of board on canvas\n  drawMidLine = (ctx) => {\n    let startPosition = this.surface2d.midLine[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.midLine) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.WHITE;\n    ctx.fill();\n    // ctx.stroke();\n    ctx.closePath();\n  }\n\n  // Draw table stands on canvas\n  drawTableStand = (ctx) => {\n    let startPosition = this.surface2d.tableLeftStand[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableLeftStand) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_B;\n    ctx.fill();\n\n    startPosition = this.surface2d.tableLeftThickness[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableLeftThickness) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_A;\n    ctx.fill();\n\n    startPosition = this.surface2d.tableRightStand[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableRightStand) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_B;\n    ctx.fill();\n\n    startPosition = this.surface2d.tableRightThickness[0];\n    ctx.beginPath();\n    ctx.moveTo(startPosition.x, startPosition.y);\n    for (const point of this.surface2d.tableRightThickness) {\n      ctx.lineTo(point.x, point.y);\n    }\n    ctx.lineTo(startPosition.x, startPosition.y);\n    ctx.fillStyle = CONST.BLACK_A;\n    ctx.fill();\n\n  }\n\n  // Draw table and board on canvas\n  draw = (ctx) => {\n    this.drawTableStand(ctx);\n    this.drawOuterSurface(ctx);\n    this.drawInnerSurface(ctx);\n    this.drawThickness(ctx);\n    this.drawMidLine(ctx);\n  }\n}\n\nexport default Board;\n","// Game image and sounds\nlet sprite;\nlet referee;\nlet bounceIn;\nlet bounceOut;\nlet batHit;\nlet clapHigh;\nlet clapLow;\n\nexport function initAssets(callbackFn) {\n\n  sprite = new Image();\n  // sprite.src = App.assets.src + 'sprite.png';\n  sprite.src = require('../assets/sprite.png');\n  sprite.onload = callbackFn;\n\n  referee = document.createElement('audio');\n  document.body.appendChild(referee);\n  referee.addEventListener('canplaythrough', callbackFn);\n  referee.setAttribute('src', require('../assets/sounds/referee.mp3'));\n\n  bounceIn = document.createElement('audio');\n  document.body.appendChild(bounceIn);\n  bounceIn.addEventListener('canplaythrough', callbackFn);\n  bounceIn.setAttribute('src', require('../assets/sounds/bounce1.mp3'));\n\n  bounceOut = document.createElement('audio');\n  document.body.appendChild(bounceOut);\n  bounceOut.addEventListener('canplaythrough', callbackFn);\n  bounceOut.setAttribute('src', require('../assets/sounds/bounce2.mp3'));\n\n  batHit = document.createElement('audio');\n  document.body.appendChild(batHit);\n  batHit.addEventListener('canplaythrough', callbackFn);\n  batHit.setAttribute('src', require('../assets/sounds/hit.mp3'));\n\n  clapHigh = document.createElement('audio');\n  document.body.appendChild(clapHigh);\n  clapHigh.addEventListener('canplaythrough', callbackFn);\n  clapHigh.setAttribute('src', require('../assets/sounds/clap1.mp3'));\n\n  clapLow = document.createElement('audio');\n  document.body.appendChild(clapLow);\n  clapLow.addEventListener('canplaythrough', callbackFn);\n  clapLow.setAttribute('src', require('../assets/sounds/clap2.mp3'));\n}\n\nexport function removeAssetsEvent(callbackFn) {\n  referee.removeEventListener('canplaythrough', callbackFn);\n  bounceIn.removeEventListener('canplaythrough', callbackFn);\n  bounceOut.removeEventListener('canplaythrough', callbackFn);\n  batHit.removeEventListener('canplaythrough', callbackFn);\n  clapHigh.removeEventListener('canplaythrough', callbackFn);\n  clapLow.removeEventListener('canplaythrough', callbackFn);\n}\n\nexport { sprite, referee, bounceIn, bounceOut, batHit, clapHigh, clapLow };","import * as CONST from '../constants';\nimport { Position, projection } from '../utils';\nimport { sprite } from '../assets';\n\nclass Net {\n  constructor() {\n    this.width = CONST.BOARD_WIDTH;\n    this.height = CONST.NET_HEIGHT;\n    this.z = CONST.NET_Z;\n    this.y = CONST.BOARD_Y;\n\n    const leftX = CONST.HALF_CANVAS_WIDTH - CONST.BOARD_HALF_WIDTH;\n    const rightX = CONST.HALF_CANVAS_WIDTH + CONST.BOARD_HALF_WIDTH;\n\n    this.surface3d = {\n      'topLeft': new Position(leftX, this.y - this.height, this.z),\n      'topRight': new Position(rightX, this.y - this.height, this.z),\n      'bottomRight': new Position(rightX, this.y, this.z),\n      'bottomLeft': new Position(leftX, this.y, this.z),\n      'netImageLeft': new Position(leftX, this.y, this.z),\n      'netImageRight': new Position(leftX + Net.sprite.strip.sw, this.y, this.z),\n    }\n\n    this.surface2d = {\n      'topLeft': projection.get2dProjection(this.surface3d.topLeft),\n      'topRight': projection.get2dProjection(this.surface3d.topRight),\n      'bottomRight': projection.get2dProjection(this.surface3d.bottomRight),\n      'bottomLeft': projection.get2dProjection(this.surface3d.bottomLeft),\n      'netImageLeft': projection.get2dProjection(this.surface3d.netImageLeft),\n      'netImageRight': projection.get2dProjection(this.surface3d.netImageRight)\n    }\n\n    this.spriteWidth;\n  }\n\n  // Draw net with sprite image on canvas\n  draw = (ctx) => {\n    const height = this.surface2d.topLeft.get2dDistance(this.surface2d.bottomLeft);\n    const width = this.surface2d.topRight.get2dDistance(this.surface2d.topLeft);\n    this.spriteWidth = this.surface2d.netImageLeft.get2dDistance(this.surface2d.netImageRight);\n    \n    // Add one more layer to left and right of net width\n    const steps = Math.floor(width / this.spriteWidth) + 2;\n    \n    for (let i = 0; i <= steps; i++) {\n      if (i === 0) {\n        ctx.drawImage(sprite,\n          Net.sprite.barLeft.sx,\n          Net.sprite.barLeft.sy,\n          Net.sprite.barLeft.sw,\n          Net.sprite.barLeft.sh,\n          this.surface2d.topLeft.x - this.spriteWidth,\n          this.surface2d.topLeft.y,\n          this.spriteWidth,\n          height);\n      } else if (i === steps) {\n        ctx.drawImage(sprite,\n          Net.sprite.barRight.sx,\n          Net.sprite.barRight.sy,\n          Net.sprite.barRight.sw,\n          Net.sprite.barRight.sh,\n          this.surface2d.topLeft.x + this.spriteWidth * (i-1),\n          this.surface2d.topLeft.y,\n          this.spriteWidth,\n          height);\n      } else {\n        ctx.drawImage(sprite,\n          Net.sprite.strip.sx,\n          Net.sprite.strip.sy,\n          Net.sprite.strip.sw,\n          Net.sprite.strip.sh,\n          this.surface2d.topLeft.x + this.spriteWidth * (i-1),\n          this.surface2d.topLeft.y,\n          this.spriteWidth,\n          height);\n      }\n    }\n  }\n\n  // Check for collision of ball on net\n  checkCollision = (ball) => {\n\n    let playBall = {\n      'playerZ': ball.current3dPos.z - CONST.BALL_MAX_RADIUS,\n      'opponentZ': ball.current3dPos.z + CONST.BALL_MAX_RADIUS,\n      'topY': ball.current3dPos.y + CONST.BALL_MAX_RADIUS,\n      'bottomY': ball.current3dPos.y - CONST.BALL_MAX_RADIUS,\n      'centerX': ball.current3dPos.x + CONST.BALL_MAX_RADIUS\n    }\n\n    if (\n      ((playBall.opponentZ >= this.z - CONST.BALL_MAX_RADIUS && playBall.opponentZ <= this.z + CONST.BALL_MAX_RADIUS)\n        || (playBall.playerZ <= this.z - CONST.BALL_MAX_RADIUS && playBall.playerZ >= this.z + CONST.BALL_MAX_RADIUS))\n      && playBall.bottomY <= this.height - CONST.BOARD_Y\n      && playBall.centerX <= this.surface3d.bottomRight.x + this.spriteWidth\n      && playBall.centerX >= this.surface3d.topLeft.x - this.spriteWidth\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\nNet.sprite = {\n  'strip': {\n    'sx': 127,\n    'sy': 0,\n    'sw': 37,\n    'sh': 90\n  },\n  'barLeft': {\n    'sx': 165,\n    'sy': 0,\n    'sw': 37,\n    'sh': 90\n  },\n  'barRight': {\n    'sx': 224,\n    'sy': 0,\n    'sw': 37,\n    'sh': 90\n  }\n}\n\nexport default Net;\n","import * as CONST from './constants';\nimport { Position, clamp } from './utils';\nimport { batHit } from './assets';\n\nlet Game = {\n  'state': {\n    'begin': true,\n    'inPlay': false,\n    'isOver': false,\n    'ballStart': true,\n    'served': false,\n    'serveSuccess': false,\n    'pause': false,\n    'ballIn': true\n  },\n  'batDirection': false\n};\n\n// Set Game ct to initial state\nfunction resetGame() {\n  Game = {\n    'state': {\n      'begin': true,\n      'inPlay': false,\n      'isOver': false,\n      'ballStart': true,\n      'served': false,\n      'serveSuccess': false,\n      'pause': false,\n      'ballIn': true\n    },\n    'batDirection': false\n  };\n}\n\nlet ctx;\nlet floor, walls, table, net, ball, player, opponent, scoreboard;\nlet animationId;\nlet lastFrameTime;\nlet onPause, onResume;\n\nfunction startGame(gameCtx, obj, pauseFn, resumeFn) {\n  ctx = gameCtx;\n  ({ floor, walls, table, net, ball, player, opponent, scoreboard } = obj);\n  onPause = pauseFn;\n  onResume = resumeFn;\n  initEscapeEvent();\n  renderGame();\n}\n\n// Draw on canvas sequentially\nfunction drawSequence(ctx) {\n  if (Math.abs(ball.current3dPos.y) < -CONST.BOARD_Y) {\n    ball.draw(ctx);\n    table.draw(ctx);\n    net.draw(ctx);\n  } else {\n    table.draw(ctx);\n    net.draw(ctx);\n    ball.draw(ctx);\n  }\n}\n\n// Perform game loop operations\nfunction renderGame() {\n  ctx.clearRect(-500, -500, CONST.CANVAS_WIDTH + 500, CONST.CANVAS_HEIGHT + 500);\n\n  floor.draw(ctx);\n  walls.draw(ctx);\n  scoreboard.draw(ctx);\n\n  if (ball.current3dPos.z > opponent.position.z) {\n    drawSequence(ctx);\n    opponent.draw(ctx);\n  } else {\n    opponent.draw(ctx);\n    drawSequence(ctx);\n  }\n\n  if (Game.state.begin && !Game.state.isOver) {\n\n    player.draw(ctx);\n    updateStates();\n\n    if (!Game.state.served) {\n      serveBall();\n    } else if (Game.state.inPlay) {\n      hitBall();\n    }\n  } else {\n    cancelAnimationFrame(animationId);\n    return;\n  }\n\n  lastFrameTime = performance.now();\n  animationId = requestAnimationFrame(renderGame);\n}\n\n// Reset player's bounce count\nfunction resetBounceCount() {\n  player.resetBounce();\n  opponent.resetBounce();\n}\n\n// Choose ball server and serve the ball\nfunction serveBall() {\n\n  if (scoreboard.state.server === player) {\n\n    // Limit ball within board\n    const x = clamp(CONST.BOARD_LEFT_X + CONST.BALL_MAX_RADIUS, CONST.BOARD_RIGHT_X - CONST.BALL_MAX_RADIUS, player.position.x);\n    ball.setPosition(new Position(x, player.position.y, CONST.BOARD_Z));\n\n    if (!Game.batDirection) player.movementDirection(ball);\n\n    if (player.batActive && Game.batDirection && ball.checkCollision(player)) {\n      resetBounceCount();\n      batHit.play();\n      player.serve(ball, lastFrameTime);\n      opponentMovement();\n      Game.state.served = true;\n      player.batActive = false;\n    }\n  } else {\n    resetBounceCount();\n    const pos = opponent.setPosition();\n    ball.setPosition(pos);\n    batHit.play();\n    opponent.serve(ball, CONST.VELOCITY);\n    Game.state.served = true;\n    player.batActive = true;\n  }\n}\n\n// Perform driving of ball to opponent's court\nfunction hitBall() {\n\n  if (player.batActive && ball.checkCollision(player)) {\n    resetBounceCount();\n    batHit.play();\n    Game.state.serveSuccess = true;\n    player.batActive = false;\n    ball.hit(player, ...player.getParameters(lastFrameTime));\n    scoreboard.state.driver = player;\n    if (player.foul()) {\n      Game.state.inPlay = false;\n    }\n    opponentMovement();\n    return;\n  }\n\n  if (opponent.batActive && ball.checkCollision(opponent)) {\n    resetBounceCount();\n    batHit.play();\n    Game.state.serveSuccess = true;\n    ball.hit(opponent, CONST.VELOCITY, CONST.SIDE_ANGLE, CONST.UP_ANGLE);\n    player.batActive = true;\n    scoreboard.state.driver = opponent;\n    if (opponent.foul()) {\n      Game.state.inPlay = false;\n    }\n    return;\n  }\n}\n\n// Update game states with conditions\nfunction updateStates() {\n\n  if (ball.bounceCount === 1) {\n    Game.state.inPlay = true;\n  }\n\n  if (net.checkCollision(ball)) {\n    ball.bounceBack(net, scoreboard.state.driver);\n    Game.state.inPlay = false;\n    scoreboard.state.driver.batActive = false;\n  }\n\n  if (Game.state.inPlay && ball.ballOut()) {\n    updateScore();\n    Game.state.served = false;\n    Game.state.inPlay = false;\n    Game.batDirection = false;\n    Game.state.serveSuccess = false;\n    player.batActive = true;\n    opponent.batActive = true;\n  }\n}\n\n// Update scoreboard for current game\nfunction updateScore() {\n  scoreboard.updateScore(player, opponent);\n  scoreboard.checkWin(gameOver);\n  scoreboard.server(player, opponent);\n}\n\n// Set game states for game over\nfunction gameOver() {\n  \n  Game.state.inPlay = false;\n  scoreboard.resetState();\n\n  if(scoreboard.allOver()) {\n    removeEscapeEvent();\n  }\n}\n\n// Control opponent's bat movement with ball's movement\nfunction opponentMovement() {\n  const pos = ball.current3dPos;\n  const slope = ball.velocity.z * CONST.TIME / (10 * ball.velocity.x);\n  const destination = new Position(pos.x + ((CONST.BOARD_END - pos.z) / slope), opponent.position.y, CONST.BOARD_END + 10);\n\n  const right = CONST.BOARD_RIGHT_X;\n  const left = CONST.BOARD_LEFT_X;\n\n  if (destination.x < left) {\n    destination.x = left;\n\n    const z = (slope * (left - pos.x)) + pos.z;\n    destination.z = z > CONST.NET_Z + CONST.BOARD_HALF_LENGTH / 2 ? z : destination.z;\n\n  } else if (destination.x > right) {\n    destination.x = right;\n\n    const z = (slope * (right - pos.x)) + pos.z;\n    destination.z = z > CONST.NET_Z + CONST.BOARD_HALF_LENGTH / 2 ? z : destination.z;\n  }\n\n  opponent.animate(destination);\n}\n\nfunction logBounce() {\n  player.logBounce(ball);\n  opponent.logBounce(ball);\n}\n\nfunction initMouseEvent() {\n  document.addEventListener('mousemove', (e) => {\n    if (player) {\n      player.handleBatMovement(e);\n    }\n  });\n}\n\nfunction escapeHandler(e) {\n  Game.state.pause = !Game.state.pause;\n  if (e.key === 'Escape') {\n    if (Game.state.pause) {\n      cancelAnimationFrame(animationId);\n      onPause();\n    } else {\n      onResume();\n      animationId = requestAnimationFrame(renderGame);\n    }\n  }\n}\n\nfunction initEscapeEvent() {\n  document.addEventListener('keyup', escapeHandler);\n}\n\nfunction removeEscapeEvent() {\n  document.removeEventListener('keyup', escapeHandler);\n}\n\nexport { Game, startGame, resetGame, logBounce, initMouseEvent };","import * as CONST from '../constants';\nimport { Position, projection } from '../utils';\nimport { sprite } from '../assets';\n\nclass Player {\n  constructor(position) {\n    this.position = new Position(position.x, position.y, position.z);\n    this.size = {\n      'long': CONST.BAT_LENGTH,\n      'width': CONST.BAT_WIDTH\n    }\n    this.halfSize = {\n      'long': this.size.long / 2,\n      'width': this.size.width / 2\n    }\n    this.surface3d;\n    this.surface2d;\n    this.bounce = 0;\n    this.batActive = true;\n    this.selfHalf;\n  }\n\n  // Set 3D position and 2D projection of Player's bat\n  loadSurface = () => {\n    this.surface3d = {\n      'topLeft': new Position(this.position.x - this.halfSize.width, this.position.y - this.halfSize.long, this.position.z),\n      'topRight': new Position(this.position.x + this.halfSize.width, this.position.y - this.halfSize.long, this.position.z),\n      'bottomRight': new Position(this.position.x + this.halfSize.width, this.position.y + this.halfSize.long, this.position.z),\n      'bottomLeft': new Position(this.position.x - this.halfSize.width, this.position.y + this.halfSize.long, this.position.z)\n    }\n\n    this.surface2d = {\n      'topLeft': projection.get2dProjection(this.surface3d.topLeft),\n      'topRight': projection.get2dProjection(this.surface3d.topRight),\n      'bottomRight': projection.get2dProjection(this.surface3d.bottomRight),\n      'bottomLeft': projection.get2dProjection(this.surface3d.bottomLeft)\n    }\n  }\n\n  // Draw Player's bat on canvas\n  draw = (ctx) => {\n\n    this.loadSurface();\n\n    let width = this.surface2d.topRight.get2dDistance(this.surface2d.topLeft);\n    let height = this.surface2d.topLeft.get2dDistance(this.surface2d.bottomLeft);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.translate(this.surface2d.topLeft.x + width / 2, this.surface2d.topLeft.y + height / 2);\n    ctx.rotate(this.getRotationAngle());\n    ctx.drawImage(sprite,\n      Player.sprite.bat.sx,\n      Player.sprite.bat.sy,\n      Player.sprite.bat.sw,\n      Player.sprite.bat.sh,\n      -width / 2,\n      -height / 2,\n      width,\n      height);\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  resetBounce = () => {\n    this.bounce = 0;\n  }\n\n  /**\n   * Get angle of rotation of bat as per Player's position\n   * @return {number} angle of rotation\n   */\n  getRotationAngle = () => {\n    let norm = (CONST.HALF_CANVAS_WIDTH - this.position.x) / (CONST.BOARD_HALF_WIDTH + CONST.BOUNDARY_PADDING);\n    let angle = Math.acos(norm) - CONST.ENV.toRadian(90);\n    return angle;\n  }\n\n  // Increase ball bounce count on Player's court \n  logBounce = (ball) => {\n    const ballPos = ball.current3dPos;\n    if (ballPos.x >= this.selfHalf.left\n      && ballPos.x <= this.selfHalf.right\n      && ballPos.z >= this.selfHalf.bottom\n      && ballPos.z <= this.selfHalf.top\n    ) {\n      this.bounce++;\n    }\n  }\n\n  /**\n   * Check for foul condition\n   * @return {boolean} foul or not foul\n   */\n  foul = () => {\n    if ((this.bounce != 1 && this.position.z <= this.selfHalf.top)) {\n      return true;\n    }\n    return false;\n  }\n\n}\n\nPlayer.sprite = {\n  'bat': {\n    'sx': 0,\n    'sy': 0,\n    'sw': 124,\n    'sh': 207\n  }\n}\n\nexport default Player;\n","import * as CONST from '../constants';\nimport Player from '../components/player';\nimport { projection, clamp } from '../utils';\nimport { Game } from '../game';\n\nclass User extends Player {\n  constructor(position) {\n    super(position);\n    this.selfHalf = {\n      'top': CONST.BOARD_Z + CONST.BOARD_HALF_LENGTH,\n      'bottom': CONST.BOARD_Z,\n      'left': CONST.BOARD_LEFT_X,\n      'right': CONST.BOARD_RIGHT_X\n    }\n  }\n\n  /**\n   * Get array of initial parameters for motion of ball\n   * @returns {velocity} initial velocity of ball\n   * @returns {sideAngle} angle between x and z axis\n   * @returns {upAngle} angle between z and y axis\n   */\n  getParameters = (lastFrameTime) => {\n\n    const dt = (performance.now() - lastFrameTime) / 1000;\n    const dx = this.position.x - this.prevPositionX;\n    const dz = this.position.z - this.prevPositionZ;\n    const sideAngle = dx !== 0 ? Math.atan(dz / dx) : 0;\n\n    // Clamp mouse velocity\n    const v = clamp(0, CONST.MAX_MOVE_VELOCITY, dz/dt);\n    \n    // Calculate velocity ranging from 60 to 90\n    // equation of line: x = (y + 2400) / 60\n    const velocity = (v + 2400) / 40;\n\n    // Calculate angle ranging from 30 to 60 degree\n    // equation of line: x = 120 - y\n    const upAngle = 120 - velocity;\n\n    return [velocity, sideAngle, upAngle];\n  }\n\n  // Serve ball from user\n  serve = (ball, lastFrameTime) => {\n    ball.serve(...this.getParameters(lastFrameTime));\n  }\n\n  // Limit movement of bat\n  fitToCourt = () => {\n    const left = CONST.BOARD_LEFT_X - CONST.BOUNDARY_PADDING + CONST.BALL_MAX_RADIUS;\n    const right = CONST.BOARD_RIGHT_X + CONST.BOUNDARY_PADDING - CONST.BALL_MAX_RADIUS;\n    const top = CONST.BOARD_Z + CONST.BOARD_HALF_LENGTH;\n    this.position.x = clamp(left, right, this.position.x);\n    this.position.z = clamp(0, top, this.position.z);\n  }\n\n  /**\n   * Set 3D position of bat from 2D position\n   * @param {Event} event - mousemove event\n   */ \n  handleBatMovement = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.prevPositionX = this.position.x;\n    this.prevPositionZ = this.position.z;\n    this.position = projection.get3dPosition(event.clientX, event.clientY);\n    this.fitToCourt();\n  }\n\n  // Allow bat movement pass the ball\n  movementDirection = (ball) => {\n    if (this.position.z - (ball.current3dPos.z - CONST.BAT_THICKNESS) < 0) {\n      Game.batDirection = true;\n    }\n  }\n}\n\nexport default User;\n","import * as CONST from '../constants';\nimport Player from '../components/player';\nimport { Position } from '../utils';\n\nclass Opponent extends Player {\n  constructor(position) {\n    super(position);\n\n    // Define court area for player\n    this.selfHalf = {\n      'top': CONST.BOARD_END,\n      'bottom': CONST.BOARD_Z + CONST.BOARD_HALF_LENGTH,\n      'left': CONST.BOARD_LEFT_X,\n      'right': CONST.BOARD_RIGHT_X\n    }\n  }\n\n  /**\n   * Set position of opponent\n   * @param {Position} position - Position object\n   * @returns {Position} new position of opponent\n   */\n  setPosition = (position) => {\n\n    if (!position) {\n      let left = CONST.BOARD_LEFT_X + CONST.BALL_MAX_RADIUS;\n      let right = CONST.BOARD_RIGHT_X - CONST.BALL_MAX_RADIUS;\n      let x = (Math.random() * (right - left)) + left;\n      let y = CONST.BOARD_Y - CONST.BALL_START_HEIGHT;\n\n      this.position = new Position(x, y, CONST.BOARD_END);\n      return this.position;\n    }\n\n    this.position = new Position(position.x, position.y, position.z);\n    return this.position;\n  }\n\n  /**\n   * Serve ball from opponent\n   * @param {number} velocity - serving velocity of ball\n   */\n  serve = (ball, velocity) => {\n    ball.setPosition(this.position);\n    ball.serve(-velocity);\n  }\n\n  /**\n   * Ease animate position of opponent from current position to new position\n   * @param {Position} destination - new position of opponent\n   */\n  animate = (destination) => {\n\n    let x = this.position.x;\n    let z = this.position.z;\n    let dx = (destination.x - this.position.x);\n    let dz = (destination.z - this.position.z);\n    let time = {\n      'total': 1500,\n      'elapsed': 0\n    };\n\n    // Ease animation from https://codepen.io/bdc/pen/MvBEwP\n\n    const getProgress = ({ elapsed, total }) => Math.min(elapsed / total, 1);\n    const easeOut = progress => Math.pow(--progress, 5) + 1;\n\n    const easeTranslate = (now) => {\n\n      if (!time.start) {\n        time.start = now;\n      } else {\n        time.elapsed = now - time.start;\n      }\n\n      const progress = getProgress(time);\n      const easing = easeOut(progress);\n\n      this.position.x = x + dx * easing;\n      this.position.z = z + dz * easing;\n      if (progress < 1) requestAnimationFrame(easeTranslate);\n    }\n\n    requestAnimationFrame(easeTranslate);\n  }\n}\n\nexport default Opponent;\n","import * as CONST from '../constants';\nimport { Position, projection } from '../utils';\nimport { Game, logBounce } from '../game/';\nimport {bounceIn, bounceOut} from '../assets';\nimport User from '../players/user';\nimport Opponent from '../players/opponent';\n\nclass Ball {\n  constructor(startPos) {\n    this.initial3dPos = new Position(startPos.x, startPos.y, startPos.z);\n    this.current3dPos = new Position(startPos.x, startPos.y, startPos.z);\n    this.radius = CONST.BALL_MAX_RADIUS;\n    this.angle = CONST.BALL_ANGLE;\n    this.initialVel = CONST.BALL_INITAL_VEL;\n    this.velocity = {\n      'z': this.initialVel * Math.cos(this.angle),\n      'y': 0,\n      'x': 0\n    }\n    this.time = 0;\n    this.rebound = false;\n    this.lastPosition = new Position(startPos.x, startPos.y, startPos.z);\n    this.bounceCount = 0;\n    this.bounceLevel = -CONST.BOARD_Y;\n  }\n\n  /**\n   * Get radius of ball with respect to its 3D position\n   * @return {number} radius of ball\n   */\n  getRadius = () => Math.max(CONST.SLOPE * (this.current3dPos.z - CONST.BOARD_Z) + CONST.BALL_MAX_RADIUS, 4);\n\n  // Draw ball on canvas\n  draw = (ctx) => {\n\n    if (Game.state.served) {\n      this.bounce();\n    }\n\n    let current3dY = this.current3dPos.y > 0 ? -this.current3dPos.y : this.current3dPos.y;\n    let current2dPos = projection.get2dProjection(new Position(this.current3dPos.x, current3dY, this.current3dPos.z));\n\n    if (this.current3dPos.z > 0) {\n      this.radius = this.getRadius();\n    }\n\n    this.drawShadow(ctx);\n\n    ctx.beginPath();\n    ctx.arc(current2dPos.x, current2dPos.y, this.radius, 0, 360);\n    ctx.fillStyle = CONST.BALL_BACKGROUND;\n    ctx.fill();\n    ctx.strokeStyle = CONST.BALL_BORDER;\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  /**\n   * Get angle of incidence of ball on xz plane\n   * @return {number} angle of incidence\n   */\n  getBounceAngle = () => {\n    let d = this.lastPosition.get3dDistance(this.current3dPos);\n    let dx = this.current3dPos.get3dDistance(new Position(this.lastPosition.x, 0, this.lastPosition.z));\n    return Math.atan(d / dx);\n  }\n\n  // Calculate and set position of ball with time\n  bounce = () => {\n    if (!this.rebound) {\n\n      // Set last position of ball\n      this.lastPosition = new Position(this.current3dPos.x, this.current3dPos.y, this.current3dPos.z);\n\n      // Calculate z coordinate of ball\n      // z = z0 + vz * t\n      this.current3dPos.z = this.initial3dPos.z + this.velocity.z * this.time;\n\n      if (this.velocity.x !== 0) {\n\n        // Calculate x coordinate of ball\n        this.current3dPos.x += this.velocity.x * 10;\n      }\n\n      // Calculate y component velocity of ball\n      // vy = v0 * sin(angle) - g*t\n      let vy = this.initialVel * Math.sin(this.angle);\n      this.velocity.y = vy - CONST.ENV.gravity * this.time;\n\n      // Calculate y coordinate of ball\n      // y = y0 + v0*sin(angle)*t - 0.5*g*t*t \n      this.current3dPos.y = -this.initial3dPos.y + (vy * this.time) - (CONST.ENV.gravity * this.time * this.time * 0.5);\n\n      // check if ball hit the board or ground\n      if (this.current3dPos.y < this.bounceLevel) {\n        this.rebound = true;\n      }\n\n      this.time += CONST.TIME;\n\n    } else {\n\n      logBounce();\n\n      // play ball bounce sound according to bouncing surface\n      if (Game.state.ballIn) {\n        bounceIn.play();\n      } else {\n        bounceOut.play();\n      }\n\n      // Perform rebound effect\n      this.initialVel = -this.velocity.y;\n      this.initial3dPos.z = this.current3dPos.z;\n      this.current3dPos.y = -this.bounceLevel;\n      this.initial3dPos.y = -this.bounceLevel;\n      this.rebound = false;\n      this.time = 0;\n      this.angle = this.getBounceAngle();\n\n      this.bounceCount++;\n    }\n  }\n\n  // Draw elliptical shadow of ball on canvas\n  drawShadow = (ctx) => {\n    let y = this.isBallInside() ? CONST.BOARD_Y : 0;\n    let shadow = new Position(this.current3dPos.x, y, this.current3dPos.z);\n    shadow = projection.get2dProjection(shadow);\n\n    ctx.beginPath();\n    ctx.ellipse(shadow.x, shadow.y, this.radius, this.radius * 0.5, 0, 0, 360);\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.2)\";\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  /**\n   * Bounce ball after collision with net\n   * @param {Player} side - Player object\n   */\n  bounceBack = (net, side) => {\n    let offsetZ;\n    let v;\n\n    this.angle = 0;\n    this.initialVel = CONST.BOUNCE_BACK_VELOCITY;\n\n    if (side instanceof User) {\n      offsetZ = net.z - CONST.NET_OFFSET;\n      v = -this.initialVel;\n    } else if (side instanceof Opponent) {\n      offsetZ = net.z + CONST.NET_OFFSET;\n      v = this.initialVel;\n    }\n\n    this.initial3dPos = new Position(this.current3dPos.x, -this.current3dPos.y, offsetZ);\n    this.current3dPos = new Position(this.current3dPos.x, -this.current3dPos.y, offsetZ);\n    this.velocity.z = v * Math.cos(this.angle);\n    this.time = 0;\n    this.bounceCount = 0;\n  }\n\n  /**\n   * Direct ball after collision with bat\n   * @param {Player} side - Player object\n   * @param {number} velocity - initial velocity of ball\n   * @param {number} sideAngle - angle between x and z axis\n   * @param {number} upAngle - angle between z and y axis\n   */\n  hit = (side, velocity, sideAngle, upAngle) => {\n    let offsetZ;\n    let v;\n\n    this.angle = CONST.ENV.toRadian(upAngle);\n    this.initialVel = velocity;\n\n    if (side instanceof User) {\n      offsetZ = side.position.z + 10;\n      v = this.initialVel;\n      this.velocity.x = sideAngle > 0 ? Math.cos(sideAngle) : -Math.cos(sideAngle);\n    } else {\n      offsetZ = side.position.z - 10;\n      v = -this.initialVel;\n      this.velocity.x = 0;\n    }\n\n    this.initial3dPos = new Position(this.current3dPos.x, -this.current3dPos.y, offsetZ);\n    this.current3dPos = new Position(this.current3dPos.x, -this.current3dPos.y, offsetZ);\n\n    // Calculate z component velocity\n    this.velocity.z = v * Math.cos(this.angle)\n\n    this.time = 0;\n    this.bounceCount = 0;\n  }\n\n  /**\n   * Set position of ball\n   * @param {Position} position - Position object\n   */\n  setPosition = (position) => {\n    this.initial3dPos = new Position(position.x, position.y, position.z);\n    this.current3dPos = new Position(position.x, position.y, position.z);\n    this.bounceCount = 0;\n    this.time = 0;\n  }\n\n  /**\n   * Set values to serve ball\n   * @param {number} velocity - serve velocity\n   * @param {number} sideAngle - angle between x and z axis\n   */\n  serve = (velocity, sideAngle) => {\n    this.initialVel = Math.abs(velocity);\n\n    if (sideAngle) {\n      this.velocity.x = sideAngle > 0 ? Math.cos(sideAngle) : -Math.cos(sideAngle);\n    } else {\n      this.velocity.x = 0;\n    }\n\n    this.angle = CONST.SERVE_ANGLE;\n\n    // Calculate z component velocity\n    this.velocity.z = velocity * Math.cos(this.angle);\n  }\n\n  /**\n   * Check collision of ball with Player's bat\n   * @param {Player} side - Player object\n   * @returns {boolean} if collision or no collision\n   */\n  checkCollision = (side) => {\n\n    let ball = this.current3dPos;\n    let ballY = Game.state.inPlay ? -ball.y : ball.y;\n\n    let bat = side.surface3d;\n\n    if (ball.x >= bat.topLeft.x\n      && ballY >= bat.topLeft.y\n      && ball.x <= bat.topRight.x\n      && ballY >= bat.topRight.y\n      && ball.x <= bat.bottomRight.x\n      && ballY <= bat.bottomRight.y\n      && ball.x >= bat.bottomLeft.x\n      && ballY <= bat.bottomLeft.y\n    ) {\n\n      if (side instanceof User) {\n        if (ball.z <= side.position.z && ball.z >= side.position.z - CONST.BAT_THICKNESS) {\n\n          // position ball infront of bat\n          if (Game.state.inPlay) ball.z = side.position.z;\n\n          return true;\n        }\n      } else if (side instanceof Opponent) {\n        if (ball.z >= side.position.z && ball.z <= side.position.z + CONST.BAT_THICKNESS) {\n\n          // position ball infront of bat\n          if (Game.state.inPlay) ball.z = side.position.z;\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if ball is over board\n   * @returns {boolean} ball over board or not\n   */\n  isBallInside = () => {\n    if (this.current3dPos.x <= CONST.BOARD_RIGHT_X + CONST.BALL_MAX_RADIUS\n      && this.current3dPos.x >= CONST.BOARD_LEFT_X - CONST.BALL_MAX_RADIUS\n      && this.current3dPos.z <= CONST.BOARD_END + CONST.BALL_MAX_RADIUS\n      && this.current3dPos.z >= CONST.BOARD_Z - CONST.BALL_MAX_RADIUS\n    ) {\n\n      // Set bounce level to table surface\n      this.bounceLevel = -CONST.BOARD_Y;\n      return true;\n    }\n\n    // Set bounce level to ground \n    this.bounceLevel = 0;\n    return false;\n  }\n\n  /**\n   * Check if ball crosses walls on background\n   * @returns {boolean} crosses or not\n   */\n  ballOut = () => {\n    if (this.current3dPos.x >= CONST.RIGHT_WALL\n      || this.current3dPos.x <= CONST.LEFT_WALL\n      || this.current3dPos.z <= 0\n      || this.current3dPos.z >= CONST.END_WALL\n    ) {\n      Game.state.ballIn = true;\n      return true;\n    }\n    Game.state.ballIn = false;\n    return false;\n  }\n  \n}\n\nexport default Ball;","import * as CONST from '../constants';\nimport User from '../players/user';\nimport Opponent from '../players/opponent';\nimport { sprite, clapHigh, clapLow } from '../assets';\nimport { Game } from '../game';\n\nclass Scoreboard {\n  constructor(position, firstServer, { playerName, bestOfGames }, endFn) {\n    this.position = position;\n    this.firstServer = firstServer;\n    this.state = {\n      'serveChange': 2,\n      'server': this.firstServer,\n      'driver': this.firstServer,\n      'deuce': false\n    }\n    this.scores = {\n      'current': {\n        'player': 0,\n        'opponent': 0\n      },\n      'games': {\n        'player': 0,\n        'opponent': 0\n      }\n    }\n    this.bestOfGames = bestOfGames;\n    this.playerName = playerName;\n    this.endFn = endFn;\n  }\n\n  // Draw scoreboard sprite to canvas\n  drawCard = (ctx) => {\n\n    if (this.state.server instanceof User) {\n      ctx.drawImage(sprite,\n        Scoreboard.sprite.player.sx,\n        Scoreboard.sprite.player.sy,\n        Scoreboard.sprite.player.sw,\n        Scoreboard.sprite.player.sh,\n        this.position.x,\n        this.position.y,\n        Scoreboard.sprite.player.sw,\n        Scoreboard.sprite.player.sh\n      );\n    } else if (this.state.server instanceof Opponent) {\n      ctx.drawImage(sprite,\n        Scoreboard.sprite.opponent.sx,\n        Scoreboard.sprite.opponent.sy,\n        Scoreboard.sprite.opponent.sw,\n        Scoreboard.sprite.opponent.sh,\n        this.position.x,\n        this.position.y,\n        Scoreboard.sprite.opponent.sw,\n        Scoreboard.sprite.opponent.sh\n      );\n    }\n  }\n\n  // Draw scoreboard text to canvas\n  drawScore = (ctx) => {\n    ctx.beginPath();\n    ctx.font = 'bold 20px Arial';\n    ctx.fillStyle = CONST.WHITE;\n    ctx.fillText(this.playerName, 70, 52);\n    ctx.fillText('COMPUTER', 54, 52 * 2);\n    ctx.fillText('COMPUTER', 54, 52 * 2);\n    ctx.fillText(this.scores.games.player, 304, 52);\n    ctx.fillText(this.scores.games.opponent, 288, 52 * 2);\n    ctx.fillStyle = CONST.BLACK_A;\n    ctx.fillText(this.scores.current.player, 364, 52);\n    ctx.fillText(this.scores.current.opponent, 348, 52 * 2);\n    ctx.closePath();\n  }\n\n  // Draw scoreboard to canvas\n  draw = (ctx) => {\n    this.drawCard(ctx);\n    this.drawScore(ctx);\n  }\n\n  // Increase game scores of players on scoreboard\n  updateScore = (player, opponent) => {\n\n    const bounce = `${player.bounce}${opponent.bounce}`;\n\n    if (Game.state.serveSuccess) {\n      if (this.state.driver === player) {\n        if (bounce === '01') {\n          this.scores.current.player++;\n          clapHigh.play();\n        } else {\n          this.scores.current.opponent++;\n          clapLow.play();\n        }\n      } else if (this.state.driver === opponent) {\n        if (bounce === '10') {\n          this.scores.current.opponent++;\n          clapLow.play();\n        } else {\n          this.scores.current.player++;\n          clapHigh.play();\n        }\n      }\n    } else {\n      if (this.state.server === player) {\n        if (bounce === '11') {\n          this.scores.current.player++;\n          clapHigh.play();\n        } else {\n          this.scores.current.opponent++;\n          clapLow.play();\n        }\n      } else if (this.state.server === opponent) {\n        if (bounce === '11') {\n          this.scores.current.opponent++;\n          clapLow.play();\n        } else {\n          this.scores.current.player++;\n          clapHigh.play();\n        }\n      }\n    }\n\n    // Condition for deuce game\n    if (this.scores.current.player === 10 && this.scores.current.opponent === 10) {\n      this.state.deuce = true;\n      this.state.serveChange = 1;\n    }\n  }\n\n  /**\n   * Check for winning conditions\n   * @param {function} gameOver - game over callback function\n   */\n  checkWin = (gameOver) => {\n\n    if (!this.state.deuce) {\n\n      if (this.scores.current.player === 11) {\n        this.scores.games.player++;\n        gameOver();\n        return;\n      }\n\n      if (this.scores.current.opponent === 11) {\n        this.scores.games.opponent++;\n        gameOver();\n        return;\n      }\n\n    } else {\n\n      const dPoints = this.scores.current.player - this.scores.current.opponent;\n\n      if (Math.abs(dPoints) === 2) {\n        const winner = dPoints > 0 ? 'player' : 'opponent';\n        this.scores.games[winner]++;\n        gameOver();\n      }\n    }\n  }\n\n  // Check for Best of Games completion\n  allOver = () => {\n\n    const playerWins = this.scores.games.player;\n    const opponentWins = this.scores.games.opponent;\n    const requiredWins = Math.ceil(this.bestOfGames / 2);\n\n    if (playerWins === requiredWins) {\n      Game.state.isOver = true;\n      this.endFn(this.playerName);\n      return true;\n    }\n\n    if (opponentWins === requiredWins) {\n      Game.state.isOver = true;\n      this.endFn('COMPUTER');\n      return true;\n    }\n\n    return false;\n  }\n\n  // Set server for game\n  server = (player, opponent) => {\n    const points = this.scores.current.player + this.scores.current.opponent;\n\n    if (points % this.state.serveChange === 0) {\n      const side = this.state.server === player ? opponent : player;\n      this.state.server = side;\n      this.state.driver = side;\n    }\n  }\n\n  // Set scoreboard to initial state\n  resetState = () => {\n    this.state = {\n      'serveChange': 2,\n      'server': this.firstServer,\n      'driver': this.firstServer\n    }\n    this.scores.current.player = 0;\n    this.scores.current.opponent = 0;\n  }\n\n}\n\nScoreboard.sprite = {\n  'player': {\n    'sx': 0,\n    'sy': 316,\n    'sw': 390,\n    'sh': 100\n  },\n  'opponent': {\n    'sx': 0,\n    'sy': 417,\n    'sw': 390,\n    'sh': 100\n  }\n}\n\nexport default Scoreboard;","import * as CONST from './constants';\nimport { Position, projection } from './utils';\nimport { Floor, Wall } from './background';\nimport Board from './components/table';\nimport Net from './components/net';\nimport Ball from './components/ball';\nimport Scoreboard from './components/scoreboard';\nimport Opponent from './players/opponent';\nimport User from './players/user';\nimport { initAssets, removeAssetsEvent, referee } from './assets';\nimport { resetGame, startGame, initMouseEvent } from './game';\n\nconst canvas = document.getElementById('game');\ncanvas.width = CONST.CANVAS_WIDTH;\ncanvas.height = CONST.CANVAS_HEIGHT;\n\nconst ctx = canvas.getContext('2d');\n\nconst layoutElement = document.body.querySelector('.layout');\nconst infoElement = document.body.querySelector('.info');\nconst introElement = document.body.querySelector('.intro');\nconst form = introElement.querySelector('form');\n\nconst App = {\n  'state': CONST.STATE_INIT,\n  'assets': {\n    'total': 7,\n    'loadCount': 0\n  }\n};\n\n// Game components\nlet floor, walls, table, net, ball, player, opponent, scoreboard;\nconst obj = {\n  floor,\n  walls,\n  table,\n  net,\n  ball,\n  player,\n  opponent,\n  scoreboard\n};\n\n// Check for load of assets\nfunction loadComplete() {\n  App.assets.loadCount++;\n\n  if (App.assets.loadCount >= App.assets.total) {\n    App.state = CONST.STATE_LOADED;\n    removeAssetsEvent(loadComplete);\n    initMouseEvent();\n    run();\n  }\n}\n\n// display DOM on pause\nfunction onPause() {\n  layoutElement.style.display = 'block';\n  infoElement.style.display = 'table';\n  infoElement.querySelector('.content').innerHTML = 'Press ESC to pause / resume';\n}\n\n// remove DOM on resume\nfunction onResume() {\n  layoutElement.style.display = 'none';\n  infoElement.style.display = 'none';\n}\n\nfunction handleFormSubmit(e) {\n  e.preventDefault();\n\n  introElement.style.display = 'none';\n  layoutElement.style.display = 'none';\n\n  const config = {\n    'playerName': (e.target.elements.player.value).toUpperCase(),\n    'bestOfGames': parseInt(e.target.elements.bestof.value)\n  };\n\n  initGame(config);\n}\n\n// Display intro components and configure game\nfunction displayIntro() {\n\n  initComponents();\n\n  infoElement.style.display = 'none';\n  introElement.style.display = 'table';\n\n  form.removeEventListener('submit', handleFormSubmit);\n  form.addEventListener('submit', handleFormSubmit);\n}\n\n// Initialize and draw game components on canvas\nfunction initComponents() {\n  ctx.clearRect(-500, -500, CONST.CANVAS_WIDTH + 500, CONST.CANVAS_HEIGHT + 500);\n\n  projection.camera.position.x = CONST.HALF_CANVAS_WIDTH;\n  projection.camera.position.y = CONST.CANVAS_HEIGHT <= -CONST.MAX_CAMERA_Y ? -CONST.CANVAS_HEIGHT : CONST.MAX_CAMERA_Y;\n  projection.viewplane.x = CONST.HALF_CANVAS_WIDTH;\n\n  const ballStartPosition = new Position(CONST.HALF_CANVAS_WIDTH, CONST.BOARD_Y - CONST.BALL_START_HEIGHT, CONST.BOARD_Z);\n  const playerPosition = new Position(0, CONST.BOARD_Y - CONST.BALL_START_HEIGHT, CONST.PLAYER_Z_POSITION);\n  const opponentPosition = new Position(1000, CONST.BOARD_Y - CONST.BALL_START_HEIGHT, CONST.OPPONENT_Z_POSITION);\n\n  obj.floor = new Floor();\n  obj.walls = new Wall();\n  obj.table = new Board();\n  obj.net = new Net();\n  obj.ball = new Ball(ballStartPosition);\n  obj.player = new User(playerPosition);\n  obj.opponent = new Opponent(opponentPosition);\n\n  obj.floor.draw(ctx);\n  obj.walls.draw(ctx);\n  obj.table.draw(ctx);\n  obj.net.draw(ctx);\n}\n\n// Initialize game with configuration\nfunction initGame(config) {\n  const scoreboardPosition = new Position(20, 20);\n  obj.scoreboard = new Scoreboard(scoreboardPosition, obj.player, config, displayWin);\n\n  referee.play();\n  startGame(ctx, obj, onPause, onResume);\n}\n\n// Display winner component for game\nfunction displayWin(player) {\n\n  referee.play();\n\n  const playAgainBtn = document.createElement('button');\n  const winText = '<div class=\"row\"><h1>' + player + ' WINS!' + '</h1></div>';\n  const content = infoElement.querySelector('.content');\n\n  playAgainBtn.classList.add('btn');\n  playAgainBtn.innerText = 'NEW GAME';\n  content.innerHTML = winText;\n  content.appendChild(playAgainBtn);\n  layoutElement.style.display = 'block';\n  infoElement.style.display = 'table';\n\n  playAgainBtn.addEventListener('click', () => {\n    resetGame();\n    displayIntro();\n  });\n}\n\nfunction run() {\n  switch (App.state) {\n  case CONST.STATE_INIT:\n    initAssets(loadComplete);\n    break;\n  case CONST.STATE_LOADED:\n    displayIntro();\n    break;\n  }\n}\n\nrun();"]}